/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RestDeleteVersioningPolicyResponse from '../model/RestDeleteVersioningPolicyResponse';
import RestExternalDirectoryCollection from '../model/RestExternalDirectoryCollection';
import RestExternalDirectoryConfig from '../model/RestExternalDirectoryConfig';
import RestExternalDirectoryResponse from '../model/RestExternalDirectoryResponse';
import TreeVersioningPolicy from '../model/TreeVersioningPolicy';

/**
* EnterpriseConfigService service.
* @module api/EnterpriseConfigServiceApi
* @version 1.0
*/
export default class EnterpriseConfigServiceApi {

    /**
    * Constructs a new EnterpriseConfigServiceApi. 
    * @alias module:api/EnterpriseConfigServiceApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * [Enterprise Only] Delete external directory
     * @param {String} configId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.configConfigId 
     * @param {String} opts.configDomainName 
     * @param {String} opts.configHost 
     * @param {String} opts.configConnection 
     * @param {String} opts.configBindDN 
     * @param {String} opts.configBindPW 
     * @param {Boolean} opts.configSkipVerifyCertificate 
     * @param {String} opts.configRootCA 
     * @param {String} opts.configRootCAData To be converted to []byte.
     * @param {Number} opts.configPageSize 
     * @param {Array.<String>} opts.configUserDNs 
     * @param {String} opts.configUserFilter 
     * @param {String} opts.configUserIDAttribute 
     * @param {String} opts.configUserDisplayAttribute 
     * @param {String} opts.configUserScope 
     * @param {String} opts.configMemberOfMappingMappingLeftAttribute 
     * @param {String} opts.configMemberOfMappingMappingRightAttribute 
     * @param {String} opts.configMemberOfMappingMappingRuleString 
     * @param {String} opts.configMemberOfMappingMappingRolePrefix 
     * @param {Array.<String>} opts.configMemberOfMappingGroupFilterDNs 
     * @param {String} opts.configMemberOfMappingGroupFilterFilter 
     * @param {String} opts.configMemberOfMappingGroupFilterIDAttribute 
     * @param {String} opts.configMemberOfMappingGroupFilterDisplayAttribute 
     * @param {String} opts.configMemberOfMappingGroupFilterScope 
     * @param {Boolean} opts.configMemberOfMappingSupportNestedGroup 
     * @param {Boolean} opts.configMemberOfMappingRealMemberOf 
     * @param {String} opts.configMemberOfMappingRealMemberOfAttribute 
     * @param {String} opts.configMemberOfMappingRealMemberOfValueFormat 
     * @param {String} opts.configMemberOfMappingPydioMemberOfAttribute 
     * @param {String} opts.configMemberOfMappingPydioMemberOfValueFormat 
     * @param {String} opts.configRolePrefix 
     * @param {String} opts.configSchedule 
     * @param {String} opts.configSchedulerDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestExternalDirectoryResponse} and HTTP response
     */
    deleteExternalDirectoryWithHttpInfo(configId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteExternalDirectory");
      }


      let pathParams = {
        'ConfigId': configId
      };
      let queryParams = {
        'Config.ConfigId': opts['configConfigId'],
        'Config.DomainName': opts['configDomainName'],
        'Config.Host': opts['configHost'],
        'Config.Connection': opts['configConnection'],
        'Config.BindDN': opts['configBindDN'],
        'Config.BindPW': opts['configBindPW'],
        'Config.SkipVerifyCertificate': opts['configSkipVerifyCertificate'],
        'Config.RootCA': opts['configRootCA'],
        'Config.RootCAData': opts['configRootCAData'],
        'Config.PageSize': opts['configPageSize'],
        'Config.User.DNs': this.apiClient.buildCollectionParam(opts['configUserDNs'], 'csv'),
        'Config.User.Filter': opts['configUserFilter'],
        'Config.User.IDAttribute': opts['configUserIDAttribute'],
        'Config.User.DisplayAttribute': opts['configUserDisplayAttribute'],
        'Config.User.Scope': opts['configUserScope'],
        'Config.MemberOfMapping.Mapping.LeftAttribute': opts['configMemberOfMappingMappingLeftAttribute'],
        'Config.MemberOfMapping.Mapping.RightAttribute': opts['configMemberOfMappingMappingRightAttribute'],
        'Config.MemberOfMapping.Mapping.RuleString': opts['configMemberOfMappingMappingRuleString'],
        'Config.MemberOfMapping.Mapping.RolePrefix': opts['configMemberOfMappingMappingRolePrefix'],
        'Config.MemberOfMapping.GroupFilter.DNs': this.apiClient.buildCollectionParam(opts['configMemberOfMappingGroupFilterDNs'], 'csv'),
        'Config.MemberOfMapping.GroupFilter.Filter': opts['configMemberOfMappingGroupFilterFilter'],
        'Config.MemberOfMapping.GroupFilter.IDAttribute': opts['configMemberOfMappingGroupFilterIDAttribute'],
        'Config.MemberOfMapping.GroupFilter.DisplayAttribute': opts['configMemberOfMappingGroupFilterDisplayAttribute'],
        'Config.MemberOfMapping.GroupFilter.Scope': opts['configMemberOfMappingGroupFilterScope'],
        'Config.MemberOfMapping.SupportNestedGroup': opts['configMemberOfMappingSupportNestedGroup'],
        'Config.MemberOfMapping.RealMemberOf': opts['configMemberOfMappingRealMemberOf'],
        'Config.MemberOfMapping.RealMemberOfAttribute': opts['configMemberOfMappingRealMemberOfAttribute'],
        'Config.MemberOfMapping.RealMemberOfValueFormat': opts['configMemberOfMappingRealMemberOfValueFormat'],
        'Config.MemberOfMapping.PydioMemberOfAttribute': opts['configMemberOfMappingPydioMemberOfAttribute'],
        'Config.MemberOfMapping.PydioMemberOfValueFormat': opts['configMemberOfMappingPydioMemberOfValueFormat'],
        'Config.RolePrefix': opts['configRolePrefix'],
        'Config.Schedule': opts['configSchedule'],
        'Config.SchedulerDetails': opts['configSchedulerDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestExternalDirectoryResponse;

      return this.apiClient.callApi(
        '/config/directories/{ConfigId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Delete external directory
     * @param {String} configId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.configConfigId 
     * @param {String} opts.configDomainName 
     * @param {String} opts.configHost 
     * @param {String} opts.configConnection 
     * @param {String} opts.configBindDN 
     * @param {String} opts.configBindPW 
     * @param {Boolean} opts.configSkipVerifyCertificate 
     * @param {String} opts.configRootCA 
     * @param {String} opts.configRootCAData To be converted to []byte.
     * @param {Number} opts.configPageSize 
     * @param {Array.<String>} opts.configUserDNs 
     * @param {String} opts.configUserFilter 
     * @param {String} opts.configUserIDAttribute 
     * @param {String} opts.configUserDisplayAttribute 
     * @param {String} opts.configUserScope 
     * @param {String} opts.configMemberOfMappingMappingLeftAttribute 
     * @param {String} opts.configMemberOfMappingMappingRightAttribute 
     * @param {String} opts.configMemberOfMappingMappingRuleString 
     * @param {String} opts.configMemberOfMappingMappingRolePrefix 
     * @param {Array.<String>} opts.configMemberOfMappingGroupFilterDNs 
     * @param {String} opts.configMemberOfMappingGroupFilterFilter 
     * @param {String} opts.configMemberOfMappingGroupFilterIDAttribute 
     * @param {String} opts.configMemberOfMappingGroupFilterDisplayAttribute 
     * @param {String} opts.configMemberOfMappingGroupFilterScope 
     * @param {Boolean} opts.configMemberOfMappingSupportNestedGroup 
     * @param {Boolean} opts.configMemberOfMappingRealMemberOf 
     * @param {String} opts.configMemberOfMappingRealMemberOfAttribute 
     * @param {String} opts.configMemberOfMappingRealMemberOfValueFormat 
     * @param {String} opts.configMemberOfMappingPydioMemberOfAttribute 
     * @param {String} opts.configMemberOfMappingPydioMemberOfValueFormat 
     * @param {String} opts.configRolePrefix 
     * @param {String} opts.configSchedule 
     * @param {String} opts.configSchedulerDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestExternalDirectoryResponse}
     */
    deleteExternalDirectory(configId, opts) {
      return this.deleteExternalDirectoryWithHttpInfo(configId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Delete a versioning policy
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.description 
     * @param {String} opts.versionsDataSourceName 
     * @param {String} opts.versionsDataSourceBucket 
     * @param {String} opts.maxTotalSize 
     * @param {String} opts.maxSizePerFile 
     * @param {String} opts.ignoreFilesGreaterThan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteVersioningPolicyResponse} and HTTP response
     */
    deleteVersioningPolicyWithHttpInfo(uuid, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteVersioningPolicy");
      }


      let pathParams = {
        'Uuid': uuid
      };
      let queryParams = {
        'Name': opts['name'],
        'Description': opts['description'],
        'VersionsDataSourceName': opts['versionsDataSourceName'],
        'VersionsDataSourceBucket': opts['versionsDataSourceBucket'],
        'MaxTotalSize': opts['maxTotalSize'],
        'MaxSizePerFile': opts['maxSizePerFile'],
        'IgnoreFilesGreaterThan': opts['ignoreFilesGreaterThan']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestDeleteVersioningPolicyResponse;

      return this.apiClient.callApi(
        '/config/versioning/{Uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Delete a versioning policy
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {String} opts.description 
     * @param {String} opts.versionsDataSourceName 
     * @param {String} opts.versionsDataSourceBucket 
     * @param {String} opts.maxTotalSize 
     * @param {String} opts.maxSizePerFile 
     * @param {String} opts.ignoreFilesGreaterThan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteVersioningPolicyResponse}
     */
    deleteVersioningPolicy(uuid, opts) {
      return this.deleteVersioningPolicyWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] List additional user directories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestExternalDirectoryCollection} and HTTP response
     */
    listExternalDirectoriesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestExternalDirectoryCollection;

      return this.apiClient.callApi(
        '/config/directories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] List additional user directories
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestExternalDirectoryCollection}
     */
    listExternalDirectories() {
      return this.listExternalDirectoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Add/Create an external directory
     * @param {String} configId 
     * @param {module:model/RestExternalDirectoryConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestExternalDirectoryResponse} and HTTP response
     */
    putExternalDirectoryWithHttpInfo(configId, body) {
      let postBody = body;

      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling putExternalDirectory");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putExternalDirectory");
      }


      let pathParams = {
        'ConfigId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestExternalDirectoryResponse;

      return this.apiClient.callApi(
        '/config/directories/{ConfigId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Add/Create an external directory
     * @param {String} configId 
     * @param {module:model/RestExternalDirectoryConfig} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestExternalDirectoryResponse}
     */
    putExternalDirectory(configId, body) {
      return this.putExternalDirectoryWithHttpInfo(configId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * [Enterprise Only] Create or update a versioning policy
     * @param {String} uuid 
     * @param {module:model/TreeVersioningPolicy} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeVersioningPolicy} and HTTP response
     */
    putVersioningPolicyWithHttpInfo(uuid, body) {
      let postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling putVersioningPolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putVersioningPolicy");
      }


      let pathParams = {
        'Uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TreeVersioningPolicy;

      return this.apiClient.callApi(
        '/config/versioning/{Uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * [Enterprise Only] Create or update a versioning policy
     * @param {String} uuid 
     * @param {module:model/TreeVersioningPolicy} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeVersioningPolicy}
     */
    putVersioningPolicy(uuid, body) {
      return this.putVersioningPolicyWithHttpInfo(uuid, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
