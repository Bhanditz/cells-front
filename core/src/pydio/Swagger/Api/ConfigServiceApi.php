<?php
/**
 * ConfigServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigServiceApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ConfigServiceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation configFormsDiscovery
     *
     * Publish Forms definition for building screens in frontend
     *
     * @param string $service_name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestDiscoveryResponse
     */
    public function configFormsDiscovery($service_name)
    {
        list($response) = $this->configFormsDiscoveryWithHttpInfo($service_name);
        return $response;
    }

    /**
     * Operation configFormsDiscoveryWithHttpInfo
     *
     * Publish Forms definition for building screens in frontend
     *
     * @param string $service_name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestDiscoveryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function configFormsDiscoveryWithHttpInfo($service_name)
    {
        // verify the required parameter 'service_name' is set
        if ($service_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $service_name when calling configFormsDiscovery');
        }
        // parse inputs
        $resourcePath = "/config/discovery/forms/{ServiceName}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($service_name !== null) {
            $resourcePath = str_replace(
                "{" . "ServiceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($service_name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestDiscoveryResponse',
                '/config/discovery/forms/{ServiceName}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestDiscoveryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestDiscoveryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation controlService
     *
     * [Not Implemented]  Start/Stop a service
     *
     * @param \Swagger\Client\Model\RestControlServiceRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CtlService
     */
    public function controlService($body)
    {
        list($response) = $this->controlServiceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation controlServiceWithHttpInfo
     *
     * [Not Implemented]  Start/Stop a service
     *
     * @param \Swagger\Client\Model\RestControlServiceRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CtlService, HTTP status code, HTTP response headers (array of strings)
     */
    public function controlServiceWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling controlService');
        }
        // parse inputs
        $resourcePath = "/config/ctl";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CtlService',
                '/config/ctl'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CtlService', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CtlService', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createEncryptionKey
     *
     * Create a new master key
     *
     * @param \Swagger\Client\Model\EncryptionAdminCreateKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\EncryptionAdminCreateKeyResponse
     */
    public function createEncryptionKey($body)
    {
        list($response) = $this->createEncryptionKeyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createEncryptionKeyWithHttpInfo
     *
     * Create a new master key
     *
     * @param \Swagger\Client\Model\EncryptionAdminCreateKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\EncryptionAdminCreateKeyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEncryptionKeyWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createEncryptionKey');
        }
        // parse inputs
        $resourcePath = "/config/encryption/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\EncryptionAdminCreateKeyResponse',
                '/config/encryption/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\EncryptionAdminCreateKeyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\EncryptionAdminCreateKeyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteDataSource
     *
     * Delete a datasource
     *
     * @param string $name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestDeleteDataSourceResponse
     */
    public function deleteDataSource($name)
    {
        list($response) = $this->deleteDataSourceWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation deleteDataSourceWithHttpInfo
     *
     * Delete a datasource
     *
     * @param string $name  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestDeleteDataSourceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDataSourceWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteDataSource');
        }
        // parse inputs
        $resourcePath = "/config/datasource/{Name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "Name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestDeleteDataSourceResponse',
                '/config/datasource/{Name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestDeleteDataSourceResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestDeleteDataSourceResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteEncryptionKey
     *
     * Delete an existing master key
     *
     * @param \Swagger\Client\Model\EncryptionAdminDeleteKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\EncryptionAdminDeleteKeyResponse
     */
    public function deleteEncryptionKey($body)
    {
        list($response) = $this->deleteEncryptionKeyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteEncryptionKeyWithHttpInfo
     *
     * Delete an existing master key
     *
     * @param \Swagger\Client\Model\EncryptionAdminDeleteKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\EncryptionAdminDeleteKeyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEncryptionKeyWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteEncryptionKey');
        }
        // parse inputs
        $resourcePath = "/config/encryption/delete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\EncryptionAdminDeleteKeyResponse',
                '/config/encryption/delete'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\EncryptionAdminDeleteKeyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\EncryptionAdminDeleteKeyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation endpointsDiscovery
     *
     * Publish available endpoints
     *
     * @param string $endpoint_type  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestDiscoveryResponse
     */
    public function endpointsDiscovery($endpoint_type = null)
    {
        list($response) = $this->endpointsDiscoveryWithHttpInfo($endpoint_type);
        return $response;
    }

    /**
     * Operation endpointsDiscoveryWithHttpInfo
     *
     * Publish available endpoints
     *
     * @param string $endpoint_type  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestDiscoveryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointsDiscoveryWithHttpInfo($endpoint_type = null)
    {
        // parse inputs
        $resourcePath = "/config/discovery";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($endpoint_type !== null) {
            $queryParams['EndpointType'] = $this->apiClient->getSerializer()->toQueryValue($endpoint_type);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestDiscoveryResponse',
                '/config/discovery'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestDiscoveryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestDiscoveryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportEncryptionKey
     *
     * Export a master key for backup purpose, protected with a password
     *
     * @param \Swagger\Client\Model\EncryptionAdminExportKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\EncryptionAdminExportKeyResponse
     */
    public function exportEncryptionKey($body)
    {
        list($response) = $this->exportEncryptionKeyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation exportEncryptionKeyWithHttpInfo
     *
     * Export a master key for backup purpose, protected with a password
     *
     * @param \Swagger\Client\Model\EncryptionAdminExportKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\EncryptionAdminExportKeyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportEncryptionKeyWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling exportEncryptionKey');
        }
        // parse inputs
        $resourcePath = "/config/encryption/export";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\EncryptionAdminExportKeyResponse',
                '/config/encryption/export'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\EncryptionAdminExportKeyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\EncryptionAdminExportKeyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConfig
     *
     * Generic config Get using a full path in the config tree
     *
     * @param string $full_path  (required)
     * @param string $data  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestConfiguration
     */
    public function getConfig($full_path, $data = null)
    {
        list($response) = $this->getConfigWithHttpInfo($full_path, $data);
        return $response;
    }

    /**
     * Operation getConfigWithHttpInfo
     *
     * Generic config Get using a full path in the config tree
     *
     * @param string $full_path  (required)
     * @param string $data  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigWithHttpInfo($full_path, $data = null)
    {
        // verify the required parameter 'full_path' is set
        if ($full_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $full_path when calling getConfig');
        }
        // parse inputs
        $resourcePath = "/config/{FullPath}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($data !== null) {
            $queryParams['Data'] = $this->apiClient->getSerializer()->toQueryValue($data);
        }
        // path params
        if ($full_path !== null) {
            $resourcePath = str_replace(
                "{" . "FullPath" . "}",
                $this->apiClient->getSerializer()->toPathValue($full_path),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestConfiguration',
                '/config/{FullPath}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestConfiguration', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestConfiguration', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDataSource
     *
     * Load datasource information
     *
     * @param string $name  (required)
     * @param bool $disabled  (optional)
     * @param string $storage_type  (optional, default to LOCAL)
     * @param string $objects_service_name  (optional)
     * @param string $objects_host  (optional)
     * @param int $objects_port  (optional)
     * @param bool $objects_secure  (optional)
     * @param string $objects_bucket  (optional)
     * @param string $objects_base_folder  (optional)
     * @param string $api_key  (optional)
     * @param string $api_secret  (optional)
     * @param string $peer_address  (optional)
     * @param bool $watch  (optional)
     * @param string $encryption_mode  (optional, default to CLEAR)
     * @param string $encryption_key  (optional)
     * @param string $versioning_policy_name  (optional)
     * @param int $creation_date  (optional)
     * @param int $last_synchronization_date  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ObjectDataSource
     */
    public function getDataSource($name, $disabled = null, $storage_type = 'LOCAL', $objects_service_name = null, $objects_host = null, $objects_port = null, $objects_secure = null, $objects_bucket = null, $objects_base_folder = null, $api_key = null, $api_secret = null, $peer_address = null, $watch = null, $encryption_mode = 'CLEAR', $encryption_key = null, $versioning_policy_name = null, $creation_date = null, $last_synchronization_date = null)
    {
        list($response) = $this->getDataSourceWithHttpInfo($name, $disabled, $storage_type, $objects_service_name, $objects_host, $objects_port, $objects_secure, $objects_bucket, $objects_base_folder, $api_key, $api_secret, $peer_address, $watch, $encryption_mode, $encryption_key, $versioning_policy_name, $creation_date, $last_synchronization_date);
        return $response;
    }

    /**
     * Operation getDataSourceWithHttpInfo
     *
     * Load datasource information
     *
     * @param string $name  (required)
     * @param bool $disabled  (optional)
     * @param string $storage_type  (optional, default to LOCAL)
     * @param string $objects_service_name  (optional)
     * @param string $objects_host  (optional)
     * @param int $objects_port  (optional)
     * @param bool $objects_secure  (optional)
     * @param string $objects_bucket  (optional)
     * @param string $objects_base_folder  (optional)
     * @param string $api_key  (optional)
     * @param string $api_secret  (optional)
     * @param string $peer_address  (optional)
     * @param bool $watch  (optional)
     * @param string $encryption_mode  (optional, default to CLEAR)
     * @param string $encryption_key  (optional)
     * @param string $versioning_policy_name  (optional)
     * @param int $creation_date  (optional)
     * @param int $last_synchronization_date  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ObjectDataSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataSourceWithHttpInfo($name, $disabled = null, $storage_type = 'LOCAL', $objects_service_name = null, $objects_host = null, $objects_port = null, $objects_secure = null, $objects_bucket = null, $objects_base_folder = null, $api_key = null, $api_secret = null, $peer_address = null, $watch = null, $encryption_mode = 'CLEAR', $encryption_key = null, $versioning_policy_name = null, $creation_date = null, $last_synchronization_date = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDataSource');
        }
        // parse inputs
        $resourcePath = "/config/datasource/{Name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($disabled !== null) {
            $queryParams['Disabled'] = $this->apiClient->getSerializer()->toQueryValue($disabled);
        }
        // query params
        if ($storage_type !== null) {
            $queryParams['StorageType'] = $this->apiClient->getSerializer()->toQueryValue($storage_type);
        }
        // query params
        if ($objects_service_name !== null) {
            $queryParams['ObjectsServiceName'] = $this->apiClient->getSerializer()->toQueryValue($objects_service_name);
        }
        // query params
        if ($objects_host !== null) {
            $queryParams['ObjectsHost'] = $this->apiClient->getSerializer()->toQueryValue($objects_host);
        }
        // query params
        if ($objects_port !== null) {
            $queryParams['ObjectsPort'] = $this->apiClient->getSerializer()->toQueryValue($objects_port);
        }
        // query params
        if ($objects_secure !== null) {
            $queryParams['ObjectsSecure'] = $this->apiClient->getSerializer()->toQueryValue($objects_secure);
        }
        // query params
        if ($objects_bucket !== null) {
            $queryParams['ObjectsBucket'] = $this->apiClient->getSerializer()->toQueryValue($objects_bucket);
        }
        // query params
        if ($objects_base_folder !== null) {
            $queryParams['ObjectsBaseFolder'] = $this->apiClient->getSerializer()->toQueryValue($objects_base_folder);
        }
        // query params
        if ($api_key !== null) {
            $queryParams['ApiKey'] = $this->apiClient->getSerializer()->toQueryValue($api_key);
        }
        // query params
        if ($api_secret !== null) {
            $queryParams['ApiSecret'] = $this->apiClient->getSerializer()->toQueryValue($api_secret);
        }
        // query params
        if ($peer_address !== null) {
            $queryParams['PeerAddress'] = $this->apiClient->getSerializer()->toQueryValue($peer_address);
        }
        // query params
        if ($watch !== null) {
            $queryParams['Watch'] = $this->apiClient->getSerializer()->toQueryValue($watch);
        }
        // query params
        if ($encryption_mode !== null) {
            $queryParams['EncryptionMode'] = $this->apiClient->getSerializer()->toQueryValue($encryption_mode);
        }
        // query params
        if ($encryption_key !== null) {
            $queryParams['EncryptionKey'] = $this->apiClient->getSerializer()->toQueryValue($encryption_key);
        }
        // query params
        if ($versioning_policy_name !== null) {
            $queryParams['VersioningPolicyName'] = $this->apiClient->getSerializer()->toQueryValue($versioning_policy_name);
        }
        // query params
        if ($creation_date !== null) {
            $queryParams['CreationDate'] = $this->apiClient->getSerializer()->toQueryValue($creation_date);
        }
        // query params
        if ($last_synchronization_date !== null) {
            $queryParams['LastSynchronizationDate'] = $this->apiClient->getSerializer()->toQueryValue($last_synchronization_date);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "Name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ObjectDataSource',
                '/config/datasource/{Name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ObjectDataSource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ObjectDataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getVersioningPolicy
     *
     * Load a given versioning policy
     *
     * @param string $uuid  (required)
     * @param string $name  (optional)
     * @param string $description  (optional)
     * @param string $versions_data_source_name  (optional)
     * @param string $versions_data_source_bucket  (optional)
     * @param string $max_total_size  (optional)
     * @param string $max_size_per_file  (optional)
     * @param string $ignore_files_greater_than  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TreeVersioningPolicy
     */
    public function getVersioningPolicy($uuid, $name = null, $description = null, $versions_data_source_name = null, $versions_data_source_bucket = null, $max_total_size = null, $max_size_per_file = null, $ignore_files_greater_than = null)
    {
        list($response) = $this->getVersioningPolicyWithHttpInfo($uuid, $name, $description, $versions_data_source_name, $versions_data_source_bucket, $max_total_size, $max_size_per_file, $ignore_files_greater_than);
        return $response;
    }

    /**
     * Operation getVersioningPolicyWithHttpInfo
     *
     * Load a given versioning policy
     *
     * @param string $uuid  (required)
     * @param string $name  (optional)
     * @param string $description  (optional)
     * @param string $versions_data_source_name  (optional)
     * @param string $versions_data_source_bucket  (optional)
     * @param string $max_total_size  (optional)
     * @param string $max_size_per_file  (optional)
     * @param string $ignore_files_greater_than  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TreeVersioningPolicy, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVersioningPolicyWithHttpInfo($uuid, $name = null, $description = null, $versions_data_source_name = null, $versions_data_source_bucket = null, $max_total_size = null, $max_size_per_file = null, $ignore_files_greater_than = null)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $uuid when calling getVersioningPolicy');
        }
        // parse inputs
        $resourcePath = "/config/versioning/{Uuid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['Name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($versions_data_source_name !== null) {
            $queryParams['VersionsDataSourceName'] = $this->apiClient->getSerializer()->toQueryValue($versions_data_source_name);
        }
        // query params
        if ($versions_data_source_bucket !== null) {
            $queryParams['VersionsDataSourceBucket'] = $this->apiClient->getSerializer()->toQueryValue($versions_data_source_bucket);
        }
        // query params
        if ($max_total_size !== null) {
            $queryParams['MaxTotalSize'] = $this->apiClient->getSerializer()->toQueryValue($max_total_size);
        }
        // query params
        if ($max_size_per_file !== null) {
            $queryParams['MaxSizePerFile'] = $this->apiClient->getSerializer()->toQueryValue($max_size_per_file);
        }
        // query params
        if ($ignore_files_greater_than !== null) {
            $queryParams['IgnoreFilesGreaterThan'] = $this->apiClient->getSerializer()->toQueryValue($ignore_files_greater_than);
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "Uuid" . "}",
                $this->apiClient->getSerializer()->toPathValue($uuid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TreeVersioningPolicy',
                '/config/versioning/{Uuid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TreeVersioningPolicy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TreeVersioningPolicy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importEncryptionKey
     *
     * Import a previously exported master key, requires the password created at export time
     *
     * @param \Swagger\Client\Model\EncryptionAdminImportKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\EncryptionAdminImportKeyResponse
     */
    public function importEncryptionKey($body)
    {
        list($response) = $this->importEncryptionKeyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation importEncryptionKeyWithHttpInfo
     *
     * Import a previously exported master key, requires the password created at export time
     *
     * @param \Swagger\Client\Model\EncryptionAdminImportKeyRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\EncryptionAdminImportKeyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importEncryptionKeyWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling importEncryptionKey');
        }
        // parse inputs
        $resourcePath = "/config/encryption/import";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\EncryptionAdminImportKeyResponse',
                '/config/encryption/import'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\EncryptionAdminImportKeyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\EncryptionAdminImportKeyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listDataSources
     *
     * List all defined datasources
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestDataSourceCollection
     */
    public function listDataSources()
    {
        list($response) = $this->listDataSourcesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listDataSourcesWithHttpInfo
     *
     * List all defined datasources
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestDataSourceCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDataSourcesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/config/datasource";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestDataSourceCollection',
                '/config/datasource'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestDataSourceCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestDataSourceCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listEncryptionKeys
     *
     * List registered master keys
     *
     * @param \Swagger\Client\Model\EncryptionAdminListKeysRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\EncryptionAdminListKeysResponse
     */
    public function listEncryptionKeys($body)
    {
        list($response) = $this->listEncryptionKeysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation listEncryptionKeysWithHttpInfo
     *
     * List registered master keys
     *
     * @param \Swagger\Client\Model\EncryptionAdminListKeysRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\EncryptionAdminListKeysResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listEncryptionKeysWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listEncryptionKeys');
        }
        // parse inputs
        $resourcePath = "/config/encryption/list";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\EncryptionAdminListKeysResponse',
                '/config/encryption/list'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\EncryptionAdminListKeysResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\EncryptionAdminListKeysResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listPeerFolders
     *
     * List folders on a peer, starting from root
     *
     * @param string $peer_address  (required)
     * @param \Swagger\Client\Model\RestListPeerFoldersRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestNodesCollection
     */
    public function listPeerFolders($peer_address, $body)
    {
        list($response) = $this->listPeerFoldersWithHttpInfo($peer_address, $body);
        return $response;
    }

    /**
     * Operation listPeerFoldersWithHttpInfo
     *
     * List folders on a peer, starting from root
     *
     * @param string $peer_address  (required)
     * @param \Swagger\Client\Model\RestListPeerFoldersRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestNodesCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPeerFoldersWithHttpInfo($peer_address, $body)
    {
        // verify the required parameter 'peer_address' is set
        if ($peer_address === null) {
            throw new \InvalidArgumentException('Missing the required parameter $peer_address when calling listPeerFolders');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling listPeerFolders');
        }
        // parse inputs
        $resourcePath = "/config/peers/{PeerAddress}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($peer_address !== null) {
            $resourcePath = str_replace(
                "{" . "PeerAddress" . "}",
                $this->apiClient->getSerializer()->toPathValue($peer_address),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestNodesCollection',
                '/config/peers/{PeerAddress}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestNodesCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestNodesCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listPeersAddresses
     *
     * List all detected peers (servers on which the app is running)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestListPeersAddressesResponse
     */
    public function listPeersAddresses()
    {
        list($response) = $this->listPeersAddressesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listPeersAddressesWithHttpInfo
     *
     * List all detected peers (servers on which the app is running)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestListPeersAddressesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPeersAddressesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/config/peers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestListPeersAddressesResponse',
                '/config/peers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestListPeersAddressesResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestListPeersAddressesResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listServices
     *
     * List all services and their status
     *
     * @param string $status_filter  (optional, default to ANY)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestServiceCollection
     */
    public function listServices($status_filter = 'ANY')
    {
        list($response) = $this->listServicesWithHttpInfo($status_filter);
        return $response;
    }

    /**
     * Operation listServicesWithHttpInfo
     *
     * List all services and their status
     *
     * @param string $status_filter  (optional, default to ANY)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestServiceCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function listServicesWithHttpInfo($status_filter = 'ANY')
    {
        // parse inputs
        $resourcePath = "/config/ctl";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($status_filter !== null) {
            $queryParams['StatusFilter'] = $this->apiClient->getSerializer()->toQueryValue($status_filter);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestServiceCollection',
                '/config/ctl'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestServiceCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestServiceCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listVersioningPolicies
     *
     * List all defined versioning policies
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestVersioningPolicyCollection
     */
    public function listVersioningPolicies()
    {
        list($response) = $this->listVersioningPoliciesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listVersioningPoliciesWithHttpInfo
     *
     * List all defined versioning policies
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestVersioningPolicyCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function listVersioningPoliciesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/config/versioning";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestVersioningPolicyCollection',
                '/config/versioning'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestVersioningPolicyCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestVersioningPolicyCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation openApiDiscovery
     *
     * Publish available REST APIs
     *
     * @param string $endpoint_type  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestOpenApiResponse
     */
    public function openApiDiscovery($endpoint_type = null)
    {
        list($response) = $this->openApiDiscoveryWithHttpInfo($endpoint_type);
        return $response;
    }

    /**
     * Operation openApiDiscoveryWithHttpInfo
     *
     * Publish available REST APIs
     *
     * @param string $endpoint_type  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestOpenApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function openApiDiscoveryWithHttpInfo($endpoint_type = null)
    {
        // parse inputs
        $resourcePath = "/config/discovery/openapi";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($endpoint_type !== null) {
            $queryParams['EndpointType'] = $this->apiClient->getSerializer()->toQueryValue($endpoint_type);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestOpenApiResponse',
                '/config/discovery/openapi'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestOpenApiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestOpenApiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putConfig
     *
     * Generic config Put, using a full path in the config tree
     *
     * @param string $full_path  (required)
     * @param \Swagger\Client\Model\RestConfiguration $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestConfiguration
     */
    public function putConfig($full_path, $body)
    {
        list($response) = $this->putConfigWithHttpInfo($full_path, $body);
        return $response;
    }

    /**
     * Operation putConfigWithHttpInfo
     *
     * Generic config Put, using a full path in the config tree
     *
     * @param string $full_path  (required)
     * @param \Swagger\Client\Model\RestConfiguration $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function putConfigWithHttpInfo($full_path, $body)
    {
        // verify the required parameter 'full_path' is set
        if ($full_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $full_path when calling putConfig');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putConfig');
        }
        // parse inputs
        $resourcePath = "/config/{FullPath}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($full_path !== null) {
            $resourcePath = str_replace(
                "{" . "FullPath" . "}",
                $this->apiClient->getSerializer()->toPathValue($full_path),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestConfiguration',
                '/config/{FullPath}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestConfiguration', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestConfiguration', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putDataSource
     *
     * Create or update a datasource
     *
     * @param string $name  (required)
     * @param \Swagger\Client\Model\ObjectDataSource $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ObjectDataSource
     */
    public function putDataSource($name, $body)
    {
        list($response) = $this->putDataSourceWithHttpInfo($name, $body);
        return $response;
    }

    /**
     * Operation putDataSourceWithHttpInfo
     *
     * Create or update a datasource
     *
     * @param string $name  (required)
     * @param \Swagger\Client\Model\ObjectDataSource $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ObjectDataSource, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDataSourceWithHttpInfo($name, $body)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putDataSource');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putDataSource');
        }
        // parse inputs
        $resourcePath = "/config/datasource/{Name}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "Name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ObjectDataSource',
                '/config/datasource/{Name}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ObjectDataSource', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ObjectDataSource', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
