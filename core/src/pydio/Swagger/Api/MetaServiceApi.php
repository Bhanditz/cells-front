<?php
/**
 * MetaServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * MetaServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetaServiceApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return MetaServiceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteMeta
     *
     * Delete metadata of a given node
     *
     * @param string $node_path  (required)
     * @param \Swagger\Client\Model\RestMetaNamespaceRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TreeNode
     */
    public function deleteMeta($node_path, $body)
    {
        list($response) = $this->deleteMetaWithHttpInfo($node_path, $body);
        return $response;
    }

    /**
     * Operation deleteMetaWithHttpInfo
     *
     * Delete metadata of a given node
     *
     * @param string $node_path  (required)
     * @param \Swagger\Client\Model\RestMetaNamespaceRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TreeNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMetaWithHttpInfo($node_path, $body)
    {
        // verify the required parameter 'node_path' is set
        if ($node_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_path when calling deleteMeta');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteMeta');
        }
        // parse inputs
        $resourcePath = "/meta/delete/{NodePath}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($node_path !== null) {
            $resourcePath = str_replace(
                "{" . "NodePath" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_path),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TreeNode',
                '/meta/delete/{NodePath}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TreeNode', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TreeNode', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkMeta
     *
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     *
     * @param \Swagger\Client\Model\RestGetBulkMetaRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestBulkMetaResponse
     */
    public function getBulkMeta($body)
    {
        list($response) = $this->getBulkMetaWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation getBulkMetaWithHttpInfo
     *
     * List meta for a list of nodes, or a full directory using /path/_* syntax
     *
     * @param \Swagger\Client\Model\RestGetBulkMetaRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestBulkMetaResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkMetaWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling getBulkMeta');
        }
        // parse inputs
        $resourcePath = "/meta/bulk/get";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestBulkMetaResponse',
                '/meta/bulk/get'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestBulkMetaResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestBulkMetaResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMeta
     *
     * Load metadata for a given node
     *
     * @param string $node_path  (required)
     * @param \Swagger\Client\Model\RestMetaNamespaceRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TreeNode
     */
    public function getMeta($node_path, $body)
    {
        list($response) = $this->getMetaWithHttpInfo($node_path, $body);
        return $response;
    }

    /**
     * Operation getMetaWithHttpInfo
     *
     * Load metadata for a given node
     *
     * @param string $node_path  (required)
     * @param \Swagger\Client\Model\RestMetaNamespaceRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TreeNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetaWithHttpInfo($node_path, $body)
    {
        // verify the required parameter 'node_path' is set
        if ($node_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_path when calling getMeta');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling getMeta');
        }
        // parse inputs
        $resourcePath = "/meta/get/{NodePath}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($node_path !== null) {
            $resourcePath = str_replace(
                "{" . "NodePath" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_path),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TreeNode',
                '/meta/get/{NodePath}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TreeNode', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TreeNode', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setMeta
     *
     * Update metadata for a given node
     *
     * @param string $node_path  (required)
     * @param \Swagger\Client\Model\RestMetaCollection $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TreeNode
     */
    public function setMeta($node_path, $body)
    {
        list($response) = $this->setMetaWithHttpInfo($node_path, $body);
        return $response;
    }

    /**
     * Operation setMetaWithHttpInfo
     *
     * Update metadata for a given node
     *
     * @param string $node_path  (required)
     * @param \Swagger\Client\Model\RestMetaCollection $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TreeNode, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMetaWithHttpInfo($node_path, $body)
    {
        // verify the required parameter 'node_path' is set
        if ($node_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_path when calling setMeta');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling setMeta');
        }
        // parse inputs
        $resourcePath = "/meta/set/{NodePath}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($node_path !== null) {
            $resourcePath = str_replace(
                "{" . "NodePath" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_path),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TreeNode',
                '/meta/set/{NodePath}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TreeNode', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TreeNode', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
