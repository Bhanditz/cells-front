<?php
/**
 * UserServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * UserServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserServiceApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UserServiceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation bindUsers
     *
     * Bind a user with her login and password
     *
     * @param string $login  (required)
     * @param \Swagger\Client\Model\IdmUser $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestBindResponse
     */
    public function bindUsers($login, $body)
    {
        list($response) = $this->bindUsersWithHttpInfo($login, $body);
        return $response;
    }

    /**
     * Operation bindUsersWithHttpInfo
     *
     * Bind a user with her login and password
     *
     * @param string $login  (required)
     * @param \Swagger\Client\Model\IdmUser $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestBindResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bindUsersWithHttpInfo($login, $body)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling bindUsers');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling bindUsers');
        }
        // parse inputs
        $resourcePath = "/user/{Login}/bind";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "Login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestBindResponse',
                '/user/{Login}/bind'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestBindResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestBindResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUser
     *
     * Delete a user
     *
     * @param string $login  (required)
     * @param string $uuid  (optional)
     * @param string $group_path  (optional)
     * @param string $password  (optional)
     * @param bool $is_group Group specific data. (optional)
     * @param string $group_label  (optional)
     * @param bool $policies_context_editable  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestDeleteResponse
     */
    public function deleteUser($login, $uuid = null, $group_path = null, $password = null, $is_group = null, $group_label = null, $policies_context_editable = null)
    {
        list($response) = $this->deleteUserWithHttpInfo($login, $uuid, $group_path, $password, $is_group, $group_label, $policies_context_editable);
        return $response;
    }

    /**
     * Operation deleteUserWithHttpInfo
     *
     * Delete a user
     *
     * @param string $login  (required)
     * @param string $uuid  (optional)
     * @param string $group_path  (optional)
     * @param string $password  (optional)
     * @param bool $is_group Group specific data. (optional)
     * @param string $group_label  (optional)
     * @param bool $policies_context_editable  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestDeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserWithHttpInfo($login, $uuid = null, $group_path = null, $password = null, $is_group = null, $group_label = null, $policies_context_editable = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling deleteUser');
        }
        // parse inputs
        $resourcePath = "/user/{Login}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($uuid !== null) {
            $queryParams['Uuid'] = $this->apiClient->getSerializer()->toQueryValue($uuid);
        }
        // query params
        if ($group_path !== null) {
            $queryParams['GroupPath'] = $this->apiClient->getSerializer()->toQueryValue($group_path);
        }
        // query params
        if ($password !== null) {
            $queryParams['Password'] = $this->apiClient->getSerializer()->toQueryValue($password);
        }
        // query params
        if ($is_group !== null) {
            $queryParams['IsGroup'] = $this->apiClient->getSerializer()->toQueryValue($is_group);
        }
        // query params
        if ($group_label !== null) {
            $queryParams['GroupLabel'] = $this->apiClient->getSerializer()->toQueryValue($group_label);
        }
        // query params
        if ($policies_context_editable !== null) {
            $queryParams['PoliciesContextEditable'] = $this->apiClient->getSerializer()->toQueryValue($policies_context_editable);
        }
        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "Login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestDeleteResponse',
                '/user/{Login}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestDeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestDeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUser
     *
     * Get a user by login
     *
     * @param string $login  (required)
     * @param string $uuid  (optional)
     * @param string $group_path  (optional)
     * @param string $password  (optional)
     * @param bool $is_group Group specific data. (optional)
     * @param string $group_label  (optional)
     * @param bool $policies_context_editable  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IdmUser
     */
    public function getUser($login, $uuid = null, $group_path = null, $password = null, $is_group = null, $group_label = null, $policies_context_editable = null)
    {
        list($response) = $this->getUserWithHttpInfo($login, $uuid, $group_path, $password, $is_group, $group_label, $policies_context_editable);
        return $response;
    }

    /**
     * Operation getUserWithHttpInfo
     *
     * Get a user by login
     *
     * @param string $login  (required)
     * @param string $uuid  (optional)
     * @param string $group_path  (optional)
     * @param string $password  (optional)
     * @param bool $is_group Group specific data. (optional)
     * @param string $group_label  (optional)
     * @param bool $policies_context_editable  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IdmUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserWithHttpInfo($login, $uuid = null, $group_path = null, $password = null, $is_group = null, $group_label = null, $policies_context_editable = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling getUser');
        }
        // parse inputs
        $resourcePath = "/user/{Login}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($uuid !== null) {
            $queryParams['Uuid'] = $this->apiClient->getSerializer()->toQueryValue($uuid);
        }
        // query params
        if ($group_path !== null) {
            $queryParams['GroupPath'] = $this->apiClient->getSerializer()->toQueryValue($group_path);
        }
        // query params
        if ($password !== null) {
            $queryParams['Password'] = $this->apiClient->getSerializer()->toQueryValue($password);
        }
        // query params
        if ($is_group !== null) {
            $queryParams['IsGroup'] = $this->apiClient->getSerializer()->toQueryValue($is_group);
        }
        // query params
        if ($group_label !== null) {
            $queryParams['GroupLabel'] = $this->apiClient->getSerializer()->toQueryValue($group_label);
        }
        // query params
        if ($policies_context_editable !== null) {
            $queryParams['PoliciesContextEditable'] = $this->apiClient->getSerializer()->toQueryValue($policies_context_editable);
        }
        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "Login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IdmUser',
                '/user/{Login}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IdmUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IdmUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putRoles
     *
     * Just save a user roles, without other datas
     *
     * @param string $login  (required)
     * @param \Swagger\Client\Model\IdmUser $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IdmUser
     */
    public function putRoles($login, $body)
    {
        list($response) = $this->putRolesWithHttpInfo($login, $body);
        return $response;
    }

    /**
     * Operation putRolesWithHttpInfo
     *
     * Just save a user roles, without other datas
     *
     * @param string $login  (required)
     * @param \Swagger\Client\Model\IdmUser $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IdmUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function putRolesWithHttpInfo($login, $body)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling putRoles');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putRoles');
        }
        // parse inputs
        $resourcePath = "/user/roles/{Login}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "Login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IdmUser',
                '/user/roles/{Login}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IdmUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IdmUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putUser
     *
     * Create or update a user
     *
     * @param string $login  (required)
     * @param \Swagger\Client\Model\IdmUser $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IdmUser
     */
    public function putUser($login, $body)
    {
        list($response) = $this->putUserWithHttpInfo($login, $body);
        return $response;
    }

    /**
     * Operation putUserWithHttpInfo
     *
     * Create or update a user
     *
     * @param string $login  (required)
     * @param \Swagger\Client\Model\IdmUser $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IdmUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function putUserWithHttpInfo($login, $body)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling putUser');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putUser');
        }
        // parse inputs
        $resourcePath = "/user/{Login}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                "{" . "Login" . "}",
                $this->apiClient->getSerializer()->toPathValue($login),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IdmUser',
                '/user/{Login}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IdmUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IdmUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchUsers
     *
     * List/Search users
     *
     * @param \Swagger\Client\Model\RestSearchUserRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestUsersCollection
     */
    public function searchUsers($body)
    {
        list($response) = $this->searchUsersWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation searchUsersWithHttpInfo
     *
     * List/Search users
     *
     * @param \Swagger\Client\Model\RestSearchUserRequest $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestUsersCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsersWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling searchUsers');
        }
        // parse inputs
        $resourcePath = "/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestUsersCollection',
                '/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestUsersCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestUsersCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
