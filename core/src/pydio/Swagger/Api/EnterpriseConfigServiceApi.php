<?php
/**
 * EnterpriseConfigServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * EnterpriseConfigServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterpriseConfigServiceApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EnterpriseConfigServiceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteExternalDirectory
     *
     * [Enterprise Only] Delete external directory
     *
     * @param string $config_id  (required)
     * @param string $config_config_id  (optional)
     * @param string $config_domain_name  (optional)
     * @param string $config_host  (optional)
     * @param string $config_connection  (optional)
     * @param string $config_bind_dn  (optional)
     * @param string $config_bind_pw  (optional)
     * @param bool $config_skip_verify_certificate  (optional)
     * @param string $config_root_ca  (optional)
     * @param string $config_root_ca_data To be converted to []byte. (optional)
     * @param int $config_page_size  (optional)
     * @param string[] $config_user_d_ns  (optional)
     * @param string $config_user_filter  (optional)
     * @param string $config_user_id_attribute  (optional)
     * @param string $config_user_display_attribute  (optional)
     * @param string $config_user_scope  (optional)
     * @param string $config_member_of_mapping_mapping_left_attribute  (optional)
     * @param string $config_member_of_mapping_mapping_right_attribute  (optional)
     * @param string $config_member_of_mapping_mapping_rule_string  (optional)
     * @param string $config_member_of_mapping_mapping_role_prefix  (optional)
     * @param string[] $config_member_of_mapping_group_filter_d_ns  (optional)
     * @param string $config_member_of_mapping_group_filter_filter  (optional)
     * @param string $config_member_of_mapping_group_filter_id_attribute  (optional)
     * @param string $config_member_of_mapping_group_filter_display_attribute  (optional)
     * @param string $config_member_of_mapping_group_filter_scope  (optional)
     * @param bool $config_member_of_mapping_support_nested_group  (optional)
     * @param bool $config_member_of_mapping_real_member_of  (optional)
     * @param string $config_member_of_mapping_real_member_of_attribute  (optional)
     * @param string $config_member_of_mapping_real_member_of_value_format  (optional)
     * @param string $config_member_of_mapping_pydio_member_of_attribute  (optional)
     * @param string $config_member_of_mapping_pydio_member_of_value_format  (optional)
     * @param string $config_role_prefix  (optional)
     * @param string $config_schedule  (optional)
     * @param string $config_scheduler_details  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestExternalDirectoryResponse
     */
    public function deleteExternalDirectory($config_id, $config_config_id = null, $config_domain_name = null, $config_host = null, $config_connection = null, $config_bind_dn = null, $config_bind_pw = null, $config_skip_verify_certificate = null, $config_root_ca = null, $config_root_ca_data = null, $config_page_size = null, $config_user_d_ns = null, $config_user_filter = null, $config_user_id_attribute = null, $config_user_display_attribute = null, $config_user_scope = null, $config_member_of_mapping_mapping_left_attribute = null, $config_member_of_mapping_mapping_right_attribute = null, $config_member_of_mapping_mapping_rule_string = null, $config_member_of_mapping_mapping_role_prefix = null, $config_member_of_mapping_group_filter_d_ns = null, $config_member_of_mapping_group_filter_filter = null, $config_member_of_mapping_group_filter_id_attribute = null, $config_member_of_mapping_group_filter_display_attribute = null, $config_member_of_mapping_group_filter_scope = null, $config_member_of_mapping_support_nested_group = null, $config_member_of_mapping_real_member_of = null, $config_member_of_mapping_real_member_of_attribute = null, $config_member_of_mapping_real_member_of_value_format = null, $config_member_of_mapping_pydio_member_of_attribute = null, $config_member_of_mapping_pydio_member_of_value_format = null, $config_role_prefix = null, $config_schedule = null, $config_scheduler_details = null)
    {
        list($response) = $this->deleteExternalDirectoryWithHttpInfo($config_id, $config_config_id, $config_domain_name, $config_host, $config_connection, $config_bind_dn, $config_bind_pw, $config_skip_verify_certificate, $config_root_ca, $config_root_ca_data, $config_page_size, $config_user_d_ns, $config_user_filter, $config_user_id_attribute, $config_user_display_attribute, $config_user_scope, $config_member_of_mapping_mapping_left_attribute, $config_member_of_mapping_mapping_right_attribute, $config_member_of_mapping_mapping_rule_string, $config_member_of_mapping_mapping_role_prefix, $config_member_of_mapping_group_filter_d_ns, $config_member_of_mapping_group_filter_filter, $config_member_of_mapping_group_filter_id_attribute, $config_member_of_mapping_group_filter_display_attribute, $config_member_of_mapping_group_filter_scope, $config_member_of_mapping_support_nested_group, $config_member_of_mapping_real_member_of, $config_member_of_mapping_real_member_of_attribute, $config_member_of_mapping_real_member_of_value_format, $config_member_of_mapping_pydio_member_of_attribute, $config_member_of_mapping_pydio_member_of_value_format, $config_role_prefix, $config_schedule, $config_scheduler_details);
        return $response;
    }

    /**
     * Operation deleteExternalDirectoryWithHttpInfo
     *
     * [Enterprise Only] Delete external directory
     *
     * @param string $config_id  (required)
     * @param string $config_config_id  (optional)
     * @param string $config_domain_name  (optional)
     * @param string $config_host  (optional)
     * @param string $config_connection  (optional)
     * @param string $config_bind_dn  (optional)
     * @param string $config_bind_pw  (optional)
     * @param bool $config_skip_verify_certificate  (optional)
     * @param string $config_root_ca  (optional)
     * @param string $config_root_ca_data To be converted to []byte. (optional)
     * @param int $config_page_size  (optional)
     * @param string[] $config_user_d_ns  (optional)
     * @param string $config_user_filter  (optional)
     * @param string $config_user_id_attribute  (optional)
     * @param string $config_user_display_attribute  (optional)
     * @param string $config_user_scope  (optional)
     * @param string $config_member_of_mapping_mapping_left_attribute  (optional)
     * @param string $config_member_of_mapping_mapping_right_attribute  (optional)
     * @param string $config_member_of_mapping_mapping_rule_string  (optional)
     * @param string $config_member_of_mapping_mapping_role_prefix  (optional)
     * @param string[] $config_member_of_mapping_group_filter_d_ns  (optional)
     * @param string $config_member_of_mapping_group_filter_filter  (optional)
     * @param string $config_member_of_mapping_group_filter_id_attribute  (optional)
     * @param string $config_member_of_mapping_group_filter_display_attribute  (optional)
     * @param string $config_member_of_mapping_group_filter_scope  (optional)
     * @param bool $config_member_of_mapping_support_nested_group  (optional)
     * @param bool $config_member_of_mapping_real_member_of  (optional)
     * @param string $config_member_of_mapping_real_member_of_attribute  (optional)
     * @param string $config_member_of_mapping_real_member_of_value_format  (optional)
     * @param string $config_member_of_mapping_pydio_member_of_attribute  (optional)
     * @param string $config_member_of_mapping_pydio_member_of_value_format  (optional)
     * @param string $config_role_prefix  (optional)
     * @param string $config_schedule  (optional)
     * @param string $config_scheduler_details  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestExternalDirectoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExternalDirectoryWithHttpInfo($config_id, $config_config_id = null, $config_domain_name = null, $config_host = null, $config_connection = null, $config_bind_dn = null, $config_bind_pw = null, $config_skip_verify_certificate = null, $config_root_ca = null, $config_root_ca_data = null, $config_page_size = null, $config_user_d_ns = null, $config_user_filter = null, $config_user_id_attribute = null, $config_user_display_attribute = null, $config_user_scope = null, $config_member_of_mapping_mapping_left_attribute = null, $config_member_of_mapping_mapping_right_attribute = null, $config_member_of_mapping_mapping_rule_string = null, $config_member_of_mapping_mapping_role_prefix = null, $config_member_of_mapping_group_filter_d_ns = null, $config_member_of_mapping_group_filter_filter = null, $config_member_of_mapping_group_filter_id_attribute = null, $config_member_of_mapping_group_filter_display_attribute = null, $config_member_of_mapping_group_filter_scope = null, $config_member_of_mapping_support_nested_group = null, $config_member_of_mapping_real_member_of = null, $config_member_of_mapping_real_member_of_attribute = null, $config_member_of_mapping_real_member_of_value_format = null, $config_member_of_mapping_pydio_member_of_attribute = null, $config_member_of_mapping_pydio_member_of_value_format = null, $config_role_prefix = null, $config_schedule = null, $config_scheduler_details = null)
    {
        // verify the required parameter 'config_id' is set
        if ($config_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $config_id when calling deleteExternalDirectory');
        }
        // parse inputs
        $resourcePath = "/config/directories/{ConfigId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($config_config_id !== null) {
            $queryParams['Config.ConfigId'] = $this->apiClient->getSerializer()->toQueryValue($config_config_id);
        }
        // query params
        if ($config_domain_name !== null) {
            $queryParams['Config.DomainName'] = $this->apiClient->getSerializer()->toQueryValue($config_domain_name);
        }
        // query params
        if ($config_host !== null) {
            $queryParams['Config.Host'] = $this->apiClient->getSerializer()->toQueryValue($config_host);
        }
        // query params
        if ($config_connection !== null) {
            $queryParams['Config.Connection'] = $this->apiClient->getSerializer()->toQueryValue($config_connection);
        }
        // query params
        if ($config_bind_dn !== null) {
            $queryParams['Config.BindDN'] = $this->apiClient->getSerializer()->toQueryValue($config_bind_dn);
        }
        // query params
        if ($config_bind_pw !== null) {
            $queryParams['Config.BindPW'] = $this->apiClient->getSerializer()->toQueryValue($config_bind_pw);
        }
        // query params
        if ($config_skip_verify_certificate !== null) {
            $queryParams['Config.SkipVerifyCertificate'] = $this->apiClient->getSerializer()->toQueryValue($config_skip_verify_certificate);
        }
        // query params
        if ($config_root_ca !== null) {
            $queryParams['Config.RootCA'] = $this->apiClient->getSerializer()->toQueryValue($config_root_ca);
        }
        // query params
        if ($config_root_ca_data !== null) {
            $queryParams['Config.RootCAData'] = $this->apiClient->getSerializer()->toQueryValue($config_root_ca_data);
        }
        // query params
        if ($config_page_size !== null) {
            $queryParams['Config.PageSize'] = $this->apiClient->getSerializer()->toQueryValue($config_page_size);
        }
        // query params
        if (is_array($config_user_d_ns)) {
            $config_user_d_ns = $this->apiClient->getSerializer()->serializeCollection($config_user_d_ns, 'csv', true);
        }
        if ($config_user_d_ns !== null) {
            $queryParams['Config.User.DNs'] = $this->apiClient->getSerializer()->toQueryValue($config_user_d_ns);
        }
        // query params
        if ($config_user_filter !== null) {
            $queryParams['Config.User.Filter'] = $this->apiClient->getSerializer()->toQueryValue($config_user_filter);
        }
        // query params
        if ($config_user_id_attribute !== null) {
            $queryParams['Config.User.IDAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_user_id_attribute);
        }
        // query params
        if ($config_user_display_attribute !== null) {
            $queryParams['Config.User.DisplayAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_user_display_attribute);
        }
        // query params
        if ($config_user_scope !== null) {
            $queryParams['Config.User.Scope'] = $this->apiClient->getSerializer()->toQueryValue($config_user_scope);
        }
        // query params
        if ($config_member_of_mapping_mapping_left_attribute !== null) {
            $queryParams['Config.MemberOfMapping.Mapping.LeftAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_mapping_left_attribute);
        }
        // query params
        if ($config_member_of_mapping_mapping_right_attribute !== null) {
            $queryParams['Config.MemberOfMapping.Mapping.RightAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_mapping_right_attribute);
        }
        // query params
        if ($config_member_of_mapping_mapping_rule_string !== null) {
            $queryParams['Config.MemberOfMapping.Mapping.RuleString'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_mapping_rule_string);
        }
        // query params
        if ($config_member_of_mapping_mapping_role_prefix !== null) {
            $queryParams['Config.MemberOfMapping.Mapping.RolePrefix'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_mapping_role_prefix);
        }
        // query params
        if (is_array($config_member_of_mapping_group_filter_d_ns)) {
            $config_member_of_mapping_group_filter_d_ns = $this->apiClient->getSerializer()->serializeCollection($config_member_of_mapping_group_filter_d_ns, 'csv', true);
        }
        if ($config_member_of_mapping_group_filter_d_ns !== null) {
            $queryParams['Config.MemberOfMapping.GroupFilter.DNs'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_group_filter_d_ns);
        }
        // query params
        if ($config_member_of_mapping_group_filter_filter !== null) {
            $queryParams['Config.MemberOfMapping.GroupFilter.Filter'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_group_filter_filter);
        }
        // query params
        if ($config_member_of_mapping_group_filter_id_attribute !== null) {
            $queryParams['Config.MemberOfMapping.GroupFilter.IDAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_group_filter_id_attribute);
        }
        // query params
        if ($config_member_of_mapping_group_filter_display_attribute !== null) {
            $queryParams['Config.MemberOfMapping.GroupFilter.DisplayAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_group_filter_display_attribute);
        }
        // query params
        if ($config_member_of_mapping_group_filter_scope !== null) {
            $queryParams['Config.MemberOfMapping.GroupFilter.Scope'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_group_filter_scope);
        }
        // query params
        if ($config_member_of_mapping_support_nested_group !== null) {
            $queryParams['Config.MemberOfMapping.SupportNestedGroup'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_support_nested_group);
        }
        // query params
        if ($config_member_of_mapping_real_member_of !== null) {
            $queryParams['Config.MemberOfMapping.RealMemberOf'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_real_member_of);
        }
        // query params
        if ($config_member_of_mapping_real_member_of_attribute !== null) {
            $queryParams['Config.MemberOfMapping.RealMemberOfAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_real_member_of_attribute);
        }
        // query params
        if ($config_member_of_mapping_real_member_of_value_format !== null) {
            $queryParams['Config.MemberOfMapping.RealMemberOfValueFormat'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_real_member_of_value_format);
        }
        // query params
        if ($config_member_of_mapping_pydio_member_of_attribute !== null) {
            $queryParams['Config.MemberOfMapping.PydioMemberOfAttribute'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_pydio_member_of_attribute);
        }
        // query params
        if ($config_member_of_mapping_pydio_member_of_value_format !== null) {
            $queryParams['Config.MemberOfMapping.PydioMemberOfValueFormat'] = $this->apiClient->getSerializer()->toQueryValue($config_member_of_mapping_pydio_member_of_value_format);
        }
        // query params
        if ($config_role_prefix !== null) {
            $queryParams['Config.RolePrefix'] = $this->apiClient->getSerializer()->toQueryValue($config_role_prefix);
        }
        // query params
        if ($config_schedule !== null) {
            $queryParams['Config.Schedule'] = $this->apiClient->getSerializer()->toQueryValue($config_schedule);
        }
        // query params
        if ($config_scheduler_details !== null) {
            $queryParams['Config.SchedulerDetails'] = $this->apiClient->getSerializer()->toQueryValue($config_scheduler_details);
        }
        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                "{" . "ConfigId" . "}",
                $this->apiClient->getSerializer()->toPathValue($config_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestExternalDirectoryResponse',
                '/config/directories/{ConfigId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestExternalDirectoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestExternalDirectoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVersioningPolicy
     *
     * [Enterprise Only] Delete a versioning policy
     *
     * @param string $uuid  (required)
     * @param string $name  (optional)
     * @param string $description  (optional)
     * @param string $versions_data_source_name  (optional)
     * @param string $versions_data_source_bucket  (optional)
     * @param string $max_total_size  (optional)
     * @param string $max_size_per_file  (optional)
     * @param string $ignore_files_greater_than  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestDeleteVersioningPolicyResponse
     */
    public function deleteVersioningPolicy($uuid, $name = null, $description = null, $versions_data_source_name = null, $versions_data_source_bucket = null, $max_total_size = null, $max_size_per_file = null, $ignore_files_greater_than = null)
    {
        list($response) = $this->deleteVersioningPolicyWithHttpInfo($uuid, $name, $description, $versions_data_source_name, $versions_data_source_bucket, $max_total_size, $max_size_per_file, $ignore_files_greater_than);
        return $response;
    }

    /**
     * Operation deleteVersioningPolicyWithHttpInfo
     *
     * [Enterprise Only] Delete a versioning policy
     *
     * @param string $uuid  (required)
     * @param string $name  (optional)
     * @param string $description  (optional)
     * @param string $versions_data_source_name  (optional)
     * @param string $versions_data_source_bucket  (optional)
     * @param string $max_total_size  (optional)
     * @param string $max_size_per_file  (optional)
     * @param string $ignore_files_greater_than  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestDeleteVersioningPolicyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVersioningPolicyWithHttpInfo($uuid, $name = null, $description = null, $versions_data_source_name = null, $versions_data_source_bucket = null, $max_total_size = null, $max_size_per_file = null, $ignore_files_greater_than = null)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $uuid when calling deleteVersioningPolicy');
        }
        // parse inputs
        $resourcePath = "/config/versioning/{Uuid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['Name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($versions_data_source_name !== null) {
            $queryParams['VersionsDataSourceName'] = $this->apiClient->getSerializer()->toQueryValue($versions_data_source_name);
        }
        // query params
        if ($versions_data_source_bucket !== null) {
            $queryParams['VersionsDataSourceBucket'] = $this->apiClient->getSerializer()->toQueryValue($versions_data_source_bucket);
        }
        // query params
        if ($max_total_size !== null) {
            $queryParams['MaxTotalSize'] = $this->apiClient->getSerializer()->toQueryValue($max_total_size);
        }
        // query params
        if ($max_size_per_file !== null) {
            $queryParams['MaxSizePerFile'] = $this->apiClient->getSerializer()->toQueryValue($max_size_per_file);
        }
        // query params
        if ($ignore_files_greater_than !== null) {
            $queryParams['IgnoreFilesGreaterThan'] = $this->apiClient->getSerializer()->toQueryValue($ignore_files_greater_than);
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "Uuid" . "}",
                $this->apiClient->getSerializer()->toPathValue($uuid),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestDeleteVersioningPolicyResponse',
                '/config/versioning/{Uuid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestDeleteVersioningPolicyResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestDeleteVersioningPolicyResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listExternalDirectories
     *
     * [Enterprise Only] List additional user directories
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestExternalDirectoryCollection
     */
    public function listExternalDirectories()
    {
        list($response) = $this->listExternalDirectoriesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listExternalDirectoriesWithHttpInfo
     *
     * [Enterprise Only] List additional user directories
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestExternalDirectoryCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function listExternalDirectoriesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/config/directories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestExternalDirectoryCollection',
                '/config/directories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestExternalDirectoryCollection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestExternalDirectoryCollection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putExternalDirectory
     *
     * [Enterprise Only] Add/Create an external directory
     *
     * @param string $config_id  (required)
     * @param \Swagger\Client\Model\RestExternalDirectoryConfig $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RestExternalDirectoryResponse
     */
    public function putExternalDirectory($config_id, $body)
    {
        list($response) = $this->putExternalDirectoryWithHttpInfo($config_id, $body);
        return $response;
    }

    /**
     * Operation putExternalDirectoryWithHttpInfo
     *
     * [Enterprise Only] Add/Create an external directory
     *
     * @param string $config_id  (required)
     * @param \Swagger\Client\Model\RestExternalDirectoryConfig $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RestExternalDirectoryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putExternalDirectoryWithHttpInfo($config_id, $body)
    {
        // verify the required parameter 'config_id' is set
        if ($config_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $config_id when calling putExternalDirectory');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putExternalDirectory');
        }
        // parse inputs
        $resourcePath = "/config/directories/{ConfigId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($config_id !== null) {
            $resourcePath = str_replace(
                "{" . "ConfigId" . "}",
                $this->apiClient->getSerializer()->toPathValue($config_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RestExternalDirectoryResponse',
                '/config/directories/{ConfigId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RestExternalDirectoryResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RestExternalDirectoryResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putVersioningPolicy
     *
     * [Enterprise Only] Create or update a versioning policy
     *
     * @param string $uuid  (required)
     * @param \Swagger\Client\Model\TreeVersioningPolicy $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TreeVersioningPolicy
     */
    public function putVersioningPolicy($uuid, $body)
    {
        list($response) = $this->putVersioningPolicyWithHttpInfo($uuid, $body);
        return $response;
    }

    /**
     * Operation putVersioningPolicyWithHttpInfo
     *
     * [Enterprise Only] Create or update a versioning policy
     *
     * @param string $uuid  (required)
     * @param \Swagger\Client\Model\TreeVersioningPolicy $body  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TreeVersioningPolicy, HTTP status code, HTTP response headers (array of strings)
     */
    public function putVersioningPolicyWithHttpInfo($uuid, $body)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $uuid when calling putVersioningPolicy');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putVersioningPolicy');
        }
        // parse inputs
        $resourcePath = "/config/versioning/{Uuid}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "Uuid" . "}",
                $this->apiClient->getSerializer()->toPathValue($uuid),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TreeVersioningPolicy',
                '/config/versioning/{Uuid}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TreeVersioningPolicy', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TreeVersioningPolicy', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
