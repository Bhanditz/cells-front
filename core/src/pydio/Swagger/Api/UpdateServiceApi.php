<?php
/**
 * UpdateServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cell Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateServiceApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UpdateServiceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation applyUpdate
     *
     * Apply an update to a given version
     *
     * @param string $target_version  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpdateApplyUpdateResponse
     */
    public function applyUpdate($target_version)
    {
        list($response) = $this->applyUpdateWithHttpInfo($target_version);
        return $response;
    }

    /**
     * Operation applyUpdateWithHttpInfo
     *
     * Apply an update to a given version
     *
     * @param string $target_version  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpdateApplyUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyUpdateWithHttpInfo($target_version)
    {
        // verify the required parameter 'target_version' is set
        if ($target_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $target_version when calling applyUpdate');
        }
        // parse inputs
        $resourcePath = "/update/{TargetVersion}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($target_version !== null) {
            $resourcePath = str_replace(
                "{" . "TargetVersion" . "}",
                $this->apiClient->getSerializer()->toPathValue($target_version),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpdateApplyUpdateResponse',
                '/update/{TargetVersion}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpdateApplyUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpdateApplyUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateRequired
     *
     * Check the remote server to see if there are available binaries
     *
     * @param string $channel Channel name. (optional)
     * @param string $package_name Name of the currently running application. (optional)
     * @param string $current_version Current version of the application. (optional)
     * @param string $goos Current GOOS. (optional)
     * @param string $goarch Current GOARCH. (optional)
     * @param string $service_name Not Used : specific service to get updates for. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UpdateUpdateResponse
     */
    public function updateRequired($channel = null, $package_name = null, $current_version = null, $goos = null, $goarch = null, $service_name = null)
    {
        list($response) = $this->updateRequiredWithHttpInfo($channel, $package_name, $current_version, $goos, $goarch, $service_name);
        return $response;
    }

    /**
     * Operation updateRequiredWithHttpInfo
     *
     * Check the remote server to see if there are available binaries
     *
     * @param string $channel Channel name. (optional)
     * @param string $package_name Name of the currently running application. (optional)
     * @param string $current_version Current version of the application. (optional)
     * @param string $goos Current GOOS. (optional)
     * @param string $goarch Current GOARCH. (optional)
     * @param string $service_name Not Used : specific service to get updates for. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UpdateUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRequiredWithHttpInfo($channel = null, $package_name = null, $current_version = null, $goos = null, $goarch = null, $service_name = null)
    {
        // parse inputs
        $resourcePath = "/update";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($channel !== null) {
            $queryParams['Channel'] = $this->apiClient->getSerializer()->toQueryValue($channel);
        }
        // query params
        if ($package_name !== null) {
            $queryParams['PackageName'] = $this->apiClient->getSerializer()->toQueryValue($package_name);
        }
        // query params
        if ($current_version !== null) {
            $queryParams['CurrentVersion'] = $this->apiClient->getSerializer()->toQueryValue($current_version);
        }
        // query params
        if ($goos !== null) {
            $queryParams['GOOS'] = $this->apiClient->getSerializer()->toQueryValue($goos);
        }
        // query params
        if ($goarch !== null) {
            $queryParams['GOARCH'] = $this->apiClient->getSerializer()->toQueryValue($goarch);
        }
        // query params
        if ($service_name !== null) {
            $queryParams['ServiceName'] = $this->apiClient->getSerializer()->toQueryValue($service_name);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UpdateUpdateResponse',
                '/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UpdateUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpdateUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
