<?php
/**
 * ActivityObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ActivityObject Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ActivityObject implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'activityObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'json_ld_context' => 'string',
        'type' => '\Swagger\Client\Model\ActivityObjectType',
        'id' => 'string',
        'name' => 'string',
        'summary' => 'string',
        'context' => '\Swagger\Client\Model\ActivityObject',
        'attachment' => '\Swagger\Client\Model\ActivityObject',
        'attributed_to' => '\Swagger\Client\Model\ActivityObject',
        'audience' => '\Swagger\Client\Model\ActivityObject',
        'content' => '\Swagger\Client\Model\ActivityObject',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'published' => '\DateTime',
        'updated' => '\DateTime',
        'duration' => '\DateTime',
        'url' => '\Swagger\Client\Model\ActivityObject',
        'media_type' => 'string',
        'icon' => '\Swagger\Client\Model\ActivityObject',
        'image' => '\Swagger\Client\Model\ActivityObject',
        'preview' => '\Swagger\Client\Model\ActivityObject',
        'location' => '\Swagger\Client\Model\ActivityObject',
        'in_reply_to' => '\Swagger\Client\Model\ActivityObject',
        'replies' => '\Swagger\Client\Model\ActivityObject',
        'tag' => '\Swagger\Client\Model\ActivityObject',
        'generator' => '\Swagger\Client\Model\ActivityObject',
        'to' => '\Swagger\Client\Model\ActivityObject',
        'bto' => '\Swagger\Client\Model\ActivityObject',
        'cc' => '\Swagger\Client\Model\ActivityObject',
        'bcc' => '\Swagger\Client\Model\ActivityObject',
        'actor' => '\Swagger\Client\Model\ActivityObject',
        'object' => '\Swagger\Client\Model\ActivityObject',
        'target' => '\Swagger\Client\Model\ActivityObject',
        'result' => '\Swagger\Client\Model\ActivityObject',
        'origin' => '\Swagger\Client\Model\ActivityObject',
        'instrument' => '\Swagger\Client\Model\ActivityObject',
        'href' => 'string',
        'rel' => 'string',
        'hreflang' => 'string',
        'height' => 'int',
        'width' => 'int',
        'one_of' => '\Swagger\Client\Model\ActivityObject',
        'any_of' => '\Swagger\Client\Model\ActivityObject',
        'closed' => '\DateTime',
        'subject' => '\Swagger\Client\Model\ActivityObject',
        'relationship' => '\Swagger\Client\Model\ActivityObject',
        'former_type' => '\Swagger\Client\Model\ActivityObjectType',
        'deleted' => '\DateTime',
        'accuracy' => 'float',
        'altitude' => 'float',
        'latitude' => 'float',
        'longitude' => 'float',
        'radius' => 'float',
        'units' => 'string',
        'items' => '\Swagger\Client\Model\ActivityObject[]',
        'total_items' => 'int',
        'current' => '\Swagger\Client\Model\ActivityObject',
        'first' => '\Swagger\Client\Model\ActivityObject',
        'last' => '\Swagger\Client\Model\ActivityObject',
        'part_of' => '\Swagger\Client\Model\ActivityObject',
        'next' => '\Swagger\Client\Model\ActivityObject',
        'prev' => '\Swagger\Client\Model\ActivityObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'json_ld_context' => null,
        'type' => null,
        'id' => null,
        'name' => null,
        'summary' => null,
        'context' => null,
        'attachment' => null,
        'attributed_to' => null,
        'audience' => null,
        'content' => null,
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'published' => 'date-time',
        'updated' => 'date-time',
        'duration' => 'date-time',
        'url' => null,
        'media_type' => null,
        'icon' => null,
        'image' => null,
        'preview' => null,
        'location' => null,
        'in_reply_to' => null,
        'replies' => null,
        'tag' => null,
        'generator' => null,
        'to' => null,
        'bto' => null,
        'cc' => null,
        'bcc' => null,
        'actor' => null,
        'object' => null,
        'target' => null,
        'result' => null,
        'origin' => null,
        'instrument' => null,
        'href' => null,
        'rel' => null,
        'hreflang' => null,
        'height' => 'int32',
        'width' => 'int32',
        'one_of' => null,
        'any_of' => null,
        'closed' => 'date-time',
        'subject' => null,
        'relationship' => null,
        'former_type' => null,
        'deleted' => 'date-time',
        'accuracy' => 'float',
        'altitude' => 'float',
        'latitude' => 'float',
        'longitude' => 'float',
        'radius' => 'float',
        'units' => null,
        'items' => null,
        'total_items' => 'int32',
        'current' => null,
        'first' => null,
        'last' => null,
        'part_of' => null,
        'next' => null,
        'prev' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'json_ld_context' => 'jsonLdContext',
        'type' => 'type',
        'id' => 'id',
        'name' => 'name',
        'summary' => 'summary',
        'context' => 'context',
        'attachment' => 'attachment',
        'attributed_to' => 'attributedTo',
        'audience' => 'audience',
        'content' => 'content',
        'start_time' => 'startTime',
        'end_time' => 'endTime',
        'published' => 'published',
        'updated' => 'updated',
        'duration' => 'duration',
        'url' => 'url',
        'media_type' => 'mediaType',
        'icon' => 'icon',
        'image' => 'image',
        'preview' => 'preview',
        'location' => 'location',
        'in_reply_to' => 'inReplyTo',
        'replies' => 'replies',
        'tag' => 'tag',
        'generator' => 'generator',
        'to' => 'to',
        'bto' => 'bto',
        'cc' => 'cc',
        'bcc' => 'bcc',
        'actor' => 'actor',
        'object' => 'object',
        'target' => 'target',
        'result' => 'result',
        'origin' => 'origin',
        'instrument' => 'instrument',
        'href' => 'href',
        'rel' => 'rel',
        'hreflang' => 'hreflang',
        'height' => 'height',
        'width' => 'width',
        'one_of' => 'oneOf',
        'any_of' => 'anyOf',
        'closed' => 'closed',
        'subject' => 'subject',
        'relationship' => 'relationship',
        'former_type' => 'formerType',
        'deleted' => 'deleted',
        'accuracy' => 'accuracy',
        'altitude' => 'altitude',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'radius' => 'radius',
        'units' => 'units',
        'items' => 'items',
        'total_items' => 'totalItems',
        'current' => 'current',
        'first' => 'first',
        'last' => 'last',
        'part_of' => 'partOf',
        'next' => 'next',
        'prev' => 'prev'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'json_ld_context' => 'setJsonLdContext',
        'type' => 'setType',
        'id' => 'setId',
        'name' => 'setName',
        'summary' => 'setSummary',
        'context' => 'setContext',
        'attachment' => 'setAttachment',
        'attributed_to' => 'setAttributedTo',
        'audience' => 'setAudience',
        'content' => 'setContent',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'published' => 'setPublished',
        'updated' => 'setUpdated',
        'duration' => 'setDuration',
        'url' => 'setUrl',
        'media_type' => 'setMediaType',
        'icon' => 'setIcon',
        'image' => 'setImage',
        'preview' => 'setPreview',
        'location' => 'setLocation',
        'in_reply_to' => 'setInReplyTo',
        'replies' => 'setReplies',
        'tag' => 'setTag',
        'generator' => 'setGenerator',
        'to' => 'setTo',
        'bto' => 'setBto',
        'cc' => 'setCc',
        'bcc' => 'setBcc',
        'actor' => 'setActor',
        'object' => 'setObject',
        'target' => 'setTarget',
        'result' => 'setResult',
        'origin' => 'setOrigin',
        'instrument' => 'setInstrument',
        'href' => 'setHref',
        'rel' => 'setRel',
        'hreflang' => 'setHreflang',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'one_of' => 'setOneOf',
        'any_of' => 'setAnyOf',
        'closed' => 'setClosed',
        'subject' => 'setSubject',
        'relationship' => 'setRelationship',
        'former_type' => 'setFormerType',
        'deleted' => 'setDeleted',
        'accuracy' => 'setAccuracy',
        'altitude' => 'setAltitude',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'radius' => 'setRadius',
        'units' => 'setUnits',
        'items' => 'setItems',
        'total_items' => 'setTotalItems',
        'current' => 'setCurrent',
        'first' => 'setFirst',
        'last' => 'setLast',
        'part_of' => 'setPartOf',
        'next' => 'setNext',
        'prev' => 'setPrev'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'json_ld_context' => 'getJsonLdContext',
        'type' => 'getType',
        'id' => 'getId',
        'name' => 'getName',
        'summary' => 'getSummary',
        'context' => 'getContext',
        'attachment' => 'getAttachment',
        'attributed_to' => 'getAttributedTo',
        'audience' => 'getAudience',
        'content' => 'getContent',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'published' => 'getPublished',
        'updated' => 'getUpdated',
        'duration' => 'getDuration',
        'url' => 'getUrl',
        'media_type' => 'getMediaType',
        'icon' => 'getIcon',
        'image' => 'getImage',
        'preview' => 'getPreview',
        'location' => 'getLocation',
        'in_reply_to' => 'getInReplyTo',
        'replies' => 'getReplies',
        'tag' => 'getTag',
        'generator' => 'getGenerator',
        'to' => 'getTo',
        'bto' => 'getBto',
        'cc' => 'getCc',
        'bcc' => 'getBcc',
        'actor' => 'getActor',
        'object' => 'getObject',
        'target' => 'getTarget',
        'result' => 'getResult',
        'origin' => 'getOrigin',
        'instrument' => 'getInstrument',
        'href' => 'getHref',
        'rel' => 'getRel',
        'hreflang' => 'getHreflang',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'one_of' => 'getOneOf',
        'any_of' => 'getAnyOf',
        'closed' => 'getClosed',
        'subject' => 'getSubject',
        'relationship' => 'getRelationship',
        'former_type' => 'getFormerType',
        'deleted' => 'getDeleted',
        'accuracy' => 'getAccuracy',
        'altitude' => 'getAltitude',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'radius' => 'getRadius',
        'units' => 'getUnits',
        'items' => 'getItems',
        'total_items' => 'getTotalItems',
        'current' => 'getCurrent',
        'first' => 'getFirst',
        'last' => 'getLast',
        'part_of' => 'getPartOf',
        'next' => 'getNext',
        'prev' => 'getPrev'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['json_ld_context'] = isset($data['json_ld_context']) ? $data['json_ld_context'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['attachment'] = isset($data['attachment']) ? $data['attachment'] : null;
        $this->container['attributed_to'] = isset($data['attributed_to']) ? $data['attributed_to'] : null;
        $this->container['audience'] = isset($data['audience']) ? $data['audience'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['media_type'] = isset($data['media_type']) ? $data['media_type'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['preview'] = isset($data['preview']) ? $data['preview'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['in_reply_to'] = isset($data['in_reply_to']) ? $data['in_reply_to'] : null;
        $this->container['replies'] = isset($data['replies']) ? $data['replies'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['generator'] = isset($data['generator']) ? $data['generator'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['bto'] = isset($data['bto']) ? $data['bto'] : null;
        $this->container['cc'] = isset($data['cc']) ? $data['cc'] : null;
        $this->container['bcc'] = isset($data['bcc']) ? $data['bcc'] : null;
        $this->container['actor'] = isset($data['actor']) ? $data['actor'] : null;
        $this->container['object'] = isset($data['object']) ? $data['object'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['instrument'] = isset($data['instrument']) ? $data['instrument'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['rel'] = isset($data['rel']) ? $data['rel'] : null;
        $this->container['hreflang'] = isset($data['hreflang']) ? $data['hreflang'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['one_of'] = isset($data['one_of']) ? $data['one_of'] : null;
        $this->container['any_of'] = isset($data['any_of']) ? $data['any_of'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['relationship'] = isset($data['relationship']) ? $data['relationship'] : null;
        $this->container['former_type'] = isset($data['former_type']) ? $data['former_type'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['accuracy'] = isset($data['accuracy']) ? $data['accuracy'] : null;
        $this->container['altitude'] = isset($data['altitude']) ? $data['altitude'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['radius'] = isset($data['radius']) ? $data['radius'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['total_items'] = isset($data['total_items']) ? $data['total_items'] : null;
        $this->container['current'] = isset($data['current']) ? $data['current'] : null;
        $this->container['first'] = isset($data['first']) ? $data['first'] : null;
        $this->container['last'] = isset($data['last']) ? $data['last'] : null;
        $this->container['part_of'] = isset($data['part_of']) ? $data['part_of'] : null;
        $this->container['next'] = isset($data['next']) ? $data['next'] : null;
        $this->container['prev'] = isset($data['prev']) ? $data['prev'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets json_ld_context
     * @return string
     */
    public function getJsonLdContext()
    {
        return $this->container['json_ld_context'];
    }

    /**
     * Sets json_ld_context
     * @param string $json_ld_context
     * @return $this
     */
    public function setJsonLdContext($json_ld_context)
    {
        $this->container['json_ld_context'] = $json_ld_context;

        return $this;
    }

    /**
     * Gets type
     * @return \Swagger\Client\Model\ActivityObjectType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Swagger\Client\Model\ActivityObjectType $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets summary
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     * @param string $summary
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets context
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     * @param \Swagger\Client\Model\ActivityObject $context
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets attachment
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     * @param \Swagger\Client\Model\ActivityObject $attachment
     * @return $this
     */
    public function setAttachment($attachment)
    {
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets attributed_to
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getAttributedTo()
    {
        return $this->container['attributed_to'];
    }

    /**
     * Sets attributed_to
     * @param \Swagger\Client\Model\ActivityObject $attributed_to
     * @return $this
     */
    public function setAttributedTo($attributed_to)
    {
        $this->container['attributed_to'] = $attributed_to;

        return $this;
    }

    /**
     * Gets audience
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getAudience()
    {
        return $this->container['audience'];
    }

    /**
     * Sets audience
     * @param \Swagger\Client\Model\ActivityObject $audience
     * @return $this
     */
    public function setAudience($audience)
    {
        $this->container['audience'] = $audience;

        return $this;
    }

    /**
     * Gets content
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param \Swagger\Client\Model\ActivityObject $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets start_time
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param \DateTime $start_time
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     * @param \DateTime $end_time
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets published
     * @return \DateTime
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     * @param \DateTime $published
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets duration
     * @return \DateTime
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param \DateTime $duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets url
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param \Swagger\Client\Model\ActivityObject $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets media_type
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     * @param string $media_type
     * @return $this
     */
    public function setMediaType($media_type)
    {
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets icon
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     * @param \Swagger\Client\Model\ActivityObject $icon
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets image
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param \Swagger\Client\Model\ActivityObject $image
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets preview
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     * @param \Swagger\Client\Model\ActivityObject $preview
     * @return $this
     */
    public function setPreview($preview)
    {
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets location
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     * @param \Swagger\Client\Model\ActivityObject $location
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets in_reply_to
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getInReplyTo()
    {
        return $this->container['in_reply_to'];
    }

    /**
     * Sets in_reply_to
     * @param \Swagger\Client\Model\ActivityObject $in_reply_to
     * @return $this
     */
    public function setInReplyTo($in_reply_to)
    {
        $this->container['in_reply_to'] = $in_reply_to;

        return $this;
    }

    /**
     * Gets replies
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getReplies()
    {
        return $this->container['replies'];
    }

    /**
     * Sets replies
     * @param \Swagger\Client\Model\ActivityObject $replies
     * @return $this
     */
    public function setReplies($replies)
    {
        $this->container['replies'] = $replies;

        return $this;
    }

    /**
     * Gets tag
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param \Swagger\Client\Model\ActivityObject $tag
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets generator
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getGenerator()
    {
        return $this->container['generator'];
    }

    /**
     * Sets generator
     * @param \Swagger\Client\Model\ActivityObject $generator
     * @return $this
     */
    public function setGenerator($generator)
    {
        $this->container['generator'] = $generator;

        return $this;
    }

    /**
     * Gets to
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     * @param \Swagger\Client\Model\ActivityObject $to
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets bto
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getBto()
    {
        return $this->container['bto'];
    }

    /**
     * Sets bto
     * @param \Swagger\Client\Model\ActivityObject $bto
     * @return $this
     */
    public function setBto($bto)
    {
        $this->container['bto'] = $bto;

        return $this;
    }

    /**
     * Gets cc
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     * @param \Swagger\Client\Model\ActivityObject $cc
     * @return $this
     */
    public function setCc($cc)
    {
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets bcc
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getBcc()
    {
        return $this->container['bcc'];
    }

    /**
     * Sets bcc
     * @param \Swagger\Client\Model\ActivityObject $bcc
     * @return $this
     */
    public function setBcc($bcc)
    {
        $this->container['bcc'] = $bcc;

        return $this;
    }

    /**
     * Gets actor
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     * @param \Swagger\Client\Model\ActivityObject $actor
     * @return $this
     */
    public function setActor($actor)
    {
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets object
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     * @param \Swagger\Client\Model\ActivityObject $object
     * @return $this
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets target
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     * @param \Swagger\Client\Model\ActivityObject $target
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets result
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     * @param \Swagger\Client\Model\ActivityObject $result
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets origin
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     * @param \Swagger\Client\Model\ActivityObject $origin
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets instrument
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getInstrument()
    {
        return $this->container['instrument'];
    }

    /**
     * Sets instrument
     * @param \Swagger\Client\Model\ActivityObject $instrument
     * @return $this
     */
    public function setInstrument($instrument)
    {
        $this->container['instrument'] = $instrument;

        return $this;
    }

    /**
     * Gets href
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     * @param string $href
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets rel
     * @return string
     */
    public function getRel()
    {
        return $this->container['rel'];
    }

    /**
     * Sets rel
     * @param string $rel
     * @return $this
     */
    public function setRel($rel)
    {
        $this->container['rel'] = $rel;

        return $this;
    }

    /**
     * Gets hreflang
     * @return string
     */
    public function getHreflang()
    {
        return $this->container['hreflang'];
    }

    /**
     * Sets hreflang
     * @param string $hreflang
     * @return $this
     */
    public function setHreflang($hreflang)
    {
        $this->container['hreflang'] = $hreflang;

        return $this;
    }

    /**
     * Gets height
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param int $height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param int $width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets one_of
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getOneOf()
    {
        return $this->container['one_of'];
    }

    /**
     * Sets one_of
     * @param \Swagger\Client\Model\ActivityObject $one_of
     * @return $this
     */
    public function setOneOf($one_of)
    {
        $this->container['one_of'] = $one_of;

        return $this;
    }

    /**
     * Gets any_of
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getAnyOf()
    {
        return $this->container['any_of'];
    }

    /**
     * Sets any_of
     * @param \Swagger\Client\Model\ActivityObject $any_of
     * @return $this
     */
    public function setAnyOf($any_of)
    {
        $this->container['any_of'] = $any_of;

        return $this;
    }

    /**
     * Gets closed
     * @return \DateTime
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     * @param \DateTime $closed
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets subject
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param \Swagger\Client\Model\ActivityObject $subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets relationship
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     * @param \Swagger\Client\Model\ActivityObject $relationship
     * @return $this
     */
    public function setRelationship($relationship)
    {
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets former_type
     * @return \Swagger\Client\Model\ActivityObjectType
     */
    public function getFormerType()
    {
        return $this->container['former_type'];
    }

    /**
     * Sets former_type
     * @param \Swagger\Client\Model\ActivityObjectType $former_type
     * @return $this
     */
    public function setFormerType($former_type)
    {
        $this->container['former_type'] = $former_type;

        return $this;
    }

    /**
     * Gets deleted
     * @return \DateTime
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     * @param \DateTime $deleted
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets accuracy
     * @return float
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     * @param float $accuracy
     * @return $this
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets altitude
     * @return float
     */
    public function getAltitude()
    {
        return $this->container['altitude'];
    }

    /**
     * Sets altitude
     * @param float $altitude
     * @return $this
     */
    public function setAltitude($altitude)
    {
        $this->container['altitude'] = $altitude;

        return $this;
    }

    /**
     * Gets latitude
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     * @param float $latitude
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     * @param float $longitude
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets radius
     * @return float
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     * @param float $radius
     * @return $this
     */
    public function setRadius($radius)
    {
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets units
     * @return string
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     * @param string $units
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets items
     * @return \Swagger\Client\Model\ActivityObject[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     * @param \Swagger\Client\Model\ActivityObject[] $items
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets total_items
     * @return int
     */
    public function getTotalItems()
    {
        return $this->container['total_items'];
    }

    /**
     * Sets total_items
     * @param int $total_items
     * @return $this
     */
    public function setTotalItems($total_items)
    {
        $this->container['total_items'] = $total_items;

        return $this;
    }

    /**
     * Gets current
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     * @param \Swagger\Client\Model\ActivityObject $current
     * @return $this
     */
    public function setCurrent($current)
    {
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets first
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getFirst()
    {
        return $this->container['first'];
    }

    /**
     * Sets first
     * @param \Swagger\Client\Model\ActivityObject $first
     * @return $this
     */
    public function setFirst($first)
    {
        $this->container['first'] = $first;

        return $this;
    }

    /**
     * Gets last
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     * @param \Swagger\Client\Model\ActivityObject $last
     * @return $this
     */
    public function setLast($last)
    {
        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets part_of
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getPartOf()
    {
        return $this->container['part_of'];
    }

    /**
     * Sets part_of
     * @param \Swagger\Client\Model\ActivityObject $part_of
     * @return $this
     */
    public function setPartOf($part_of)
    {
        $this->container['part_of'] = $part_of;

        return $this;
    }

    /**
     * Gets next
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getNext()
    {
        return $this->container['next'];
    }

    /**
     * Sets next
     * @param \Swagger\Client\Model\ActivityObject $next
     * @return $this
     */
    public function setNext($next)
    {
        $this->container['next'] = $next;

        return $this;
    }

    /**
     * Gets prev
     * @return \Swagger\Client\Model\ActivityObject
     */
    public function getPrev()
    {
        return $this->container['prev'];
    }

    /**
     * Sets prev
     * @param \Swagger\Client\Model\ActivityObject $prev
     * @return $this
     */
    public function setPrev($prev)
    {
        $this->container['prev'] = $prev;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


