<?php
/**
 * MailerMail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MailerMail Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MailerMail implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'mailerMail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from' => '\Swagger\Client\Model\MailerUser',
        'to' => '\Swagger\Client\Model\MailerUser[]',
        'cc' => '\Swagger\Client\Model\MailerUser[]',
        'date_sent' => 'string',
        'subject' => 'string',
        'content_plain' => 'string',
        'content_html' => 'string',
        'content_markdown' => 'string',
        'attachments' => 'string[]',
        'thread_uuid' => 'string',
        'thread_index' => 'string',
        'template_id' => 'string',
        'template_data' => 'map[string,string]',
        'retries' => 'int',
        'send_errors' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from' => null,
        'to' => null,
        'cc' => null,
        'date_sent' => 'int64',
        'subject' => null,
        'content_plain' => null,
        'content_html' => null,
        'content_markdown' => null,
        'attachments' => null,
        'thread_uuid' => null,
        'thread_index' => null,
        'template_id' => null,
        'template_data' => null,
        'retries' => 'int32',
        'send_errors' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'From',
        'to' => 'To',
        'cc' => 'Cc',
        'date_sent' => 'DateSent',
        'subject' => 'Subject',
        'content_plain' => 'ContentPlain',
        'content_html' => 'ContentHtml',
        'content_markdown' => 'ContentMarkdown',
        'attachments' => 'Attachments',
        'thread_uuid' => 'ThreadUuid',
        'thread_index' => 'ThreadIndex',
        'template_id' => 'TemplateId',
        'template_data' => 'TemplateData',
        'retries' => 'Retries',
        'send_errors' => 'sendErrors'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'cc' => 'setCc',
        'date_sent' => 'setDateSent',
        'subject' => 'setSubject',
        'content_plain' => 'setContentPlain',
        'content_html' => 'setContentHtml',
        'content_markdown' => 'setContentMarkdown',
        'attachments' => 'setAttachments',
        'thread_uuid' => 'setThreadUuid',
        'thread_index' => 'setThreadIndex',
        'template_id' => 'setTemplateId',
        'template_data' => 'setTemplateData',
        'retries' => 'setRetries',
        'send_errors' => 'setSendErrors'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'cc' => 'getCc',
        'date_sent' => 'getDateSent',
        'subject' => 'getSubject',
        'content_plain' => 'getContentPlain',
        'content_html' => 'getContentHtml',
        'content_markdown' => 'getContentMarkdown',
        'attachments' => 'getAttachments',
        'thread_uuid' => 'getThreadUuid',
        'thread_index' => 'getThreadIndex',
        'template_id' => 'getTemplateId',
        'template_data' => 'getTemplateData',
        'retries' => 'getRetries',
        'send_errors' => 'getSendErrors'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['cc'] = isset($data['cc']) ? $data['cc'] : null;
        $this->container['date_sent'] = isset($data['date_sent']) ? $data['date_sent'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['content_plain'] = isset($data['content_plain']) ? $data['content_plain'] : null;
        $this->container['content_html'] = isset($data['content_html']) ? $data['content_html'] : null;
        $this->container['content_markdown'] = isset($data['content_markdown']) ? $data['content_markdown'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['thread_uuid'] = isset($data['thread_uuid']) ? $data['thread_uuid'] : null;
        $this->container['thread_index'] = isset($data['thread_index']) ? $data['thread_index'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['template_data'] = isset($data['template_data']) ? $data['template_data'] : null;
        $this->container['retries'] = isset($data['retries']) ? $data['retries'] : null;
        $this->container['send_errors'] = isset($data['send_errors']) ? $data['send_errors'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets from
     * @return \Swagger\Client\Model\MailerUser
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     * @param \Swagger\Client\Model\MailerUser $from
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     * @return \Swagger\Client\Model\MailerUser[]
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     * @param \Swagger\Client\Model\MailerUser[] $to
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets cc
     * @return \Swagger\Client\Model\MailerUser[]
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     * @param \Swagger\Client\Model\MailerUser[] $cc
     * @return $this
     */
    public function setCc($cc)
    {
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets date_sent
     * @return string
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     * @param string $date_sent
     * @return $this
     */
    public function setDateSent($date_sent)
    {
        $this->container['date_sent'] = $date_sent;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets content_plain
     * @return string
     */
    public function getContentPlain()
    {
        return $this->container['content_plain'];
    }

    /**
     * Sets content_plain
     * @param string $content_plain
     * @return $this
     */
    public function setContentPlain($content_plain)
    {
        $this->container['content_plain'] = $content_plain;

        return $this;
    }

    /**
     * Gets content_html
     * @return string
     */
    public function getContentHtml()
    {
        return $this->container['content_html'];
    }

    /**
     * Sets content_html
     * @param string $content_html
     * @return $this
     */
    public function setContentHtml($content_html)
    {
        $this->container['content_html'] = $content_html;

        return $this;
    }

    /**
     * Gets content_markdown
     * @return string
     */
    public function getContentMarkdown()
    {
        return $this->container['content_markdown'];
    }

    /**
     * Sets content_markdown
     * @param string $content_markdown
     * @return $this
     */
    public function setContentMarkdown($content_markdown)
    {
        $this->container['content_markdown'] = $content_markdown;

        return $this;
    }

    /**
     * Gets attachments
     * @return string[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     * @param string[] $attachments
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets thread_uuid
     * @return string
     */
    public function getThreadUuid()
    {
        return $this->container['thread_uuid'];
    }

    /**
     * Sets thread_uuid
     * @param string $thread_uuid
     * @return $this
     */
    public function setThreadUuid($thread_uuid)
    {
        $this->container['thread_uuid'] = $thread_uuid;

        return $this;
    }

    /**
     * Gets thread_index
     * @return string
     */
    public function getThreadIndex()
    {
        return $this->container['thread_index'];
    }

    /**
     * Sets thread_index
     * @param string $thread_index
     * @return $this
     */
    public function setThreadIndex($thread_index)
    {
        $this->container['thread_index'] = $thread_index;

        return $this;
    }

    /**
     * Gets template_id
     * @return string
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     * @param string $template_id
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_data
     * @return map[string,string]
     */
    public function getTemplateData()
    {
        return $this->container['template_data'];
    }

    /**
     * Sets template_data
     * @param map[string,string] $template_data
     * @return $this
     */
    public function setTemplateData($template_data)
    {
        $this->container['template_data'] = $template_data;

        return $this;
    }

    /**
     * Gets retries
     * @return int
     */
    public function getRetries()
    {
        return $this->container['retries'];
    }

    /**
     * Sets retries
     * @param int $retries
     * @return $this
     */
    public function setRetries($retries)
    {
        $this->container['retries'] = $retries;

        return $this;
    }

    /**
     * Gets send_errors
     * @return string[]
     */
    public function getSendErrors()
    {
        return $this->container['send_errors'];
    }

    /**
     * Sets send_errors
     * @param string[] $send_errors
     * @return $this
     */
    public function setSendErrors($send_errors)
    {
        $this->container['send_errors'] = $send_errors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


