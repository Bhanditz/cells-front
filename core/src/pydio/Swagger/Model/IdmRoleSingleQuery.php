<?php
/**
 * IdmRoleSingleQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IdmRoleSingleQuery Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IdmRoleSingleQuery implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'idmRoleSingleQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string[]',
        'label' => 'string',
        'is_team' => 'bool',
        'is_group_role' => 'bool',
        'is_user_role' => 'bool',
        'has_auto_apply' => 'bool',
        'not' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'label' => null,
        'is_team' => 'boolean',
        'is_group_role' => 'boolean',
        'is_user_role' => 'boolean',
        'has_auto_apply' => 'boolean',
        'not' => 'boolean'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'Uuid',
        'label' => 'Label',
        'is_team' => 'IsTeam',
        'is_group_role' => 'IsGroupRole',
        'is_user_role' => 'IsUserRole',
        'has_auto_apply' => 'HasAutoApply',
        'not' => 'not'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'label' => 'setLabel',
        'is_team' => 'setIsTeam',
        'is_group_role' => 'setIsGroupRole',
        'is_user_role' => 'setIsUserRole',
        'has_auto_apply' => 'setHasAutoApply',
        'not' => 'setNot'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'label' => 'getLabel',
        'is_team' => 'getIsTeam',
        'is_group_role' => 'getIsGroupRole',
        'is_user_role' => 'getIsUserRole',
        'has_auto_apply' => 'getHasAutoApply',
        'not' => 'getNot'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['is_team'] = isset($data['is_team']) ? $data['is_team'] : null;
        $this->container['is_group_role'] = isset($data['is_group_role']) ? $data['is_group_role'] : null;
        $this->container['is_user_role'] = isset($data['is_user_role']) ? $data['is_user_role'] : null;
        $this->container['has_auto_apply'] = isset($data['has_auto_apply']) ? $data['has_auto_apply'] : null;
        $this->container['not'] = isset($data['not']) ? $data['not'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets uuid
     * @return string[]
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string[] $uuid
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets is_team
     * @return bool
     */
    public function getIsTeam()
    {
        return $this->container['is_team'];
    }

    /**
     * Sets is_team
     * @param bool $is_team
     * @return $this
     */
    public function setIsTeam($is_team)
    {
        $this->container['is_team'] = $is_team;

        return $this;
    }

    /**
     * Gets is_group_role
     * @return bool
     */
    public function getIsGroupRole()
    {
        return $this->container['is_group_role'];
    }

    /**
     * Sets is_group_role
     * @param bool $is_group_role
     * @return $this
     */
    public function setIsGroupRole($is_group_role)
    {
        $this->container['is_group_role'] = $is_group_role;

        return $this;
    }

    /**
     * Gets is_user_role
     * @return bool
     */
    public function getIsUserRole()
    {
        return $this->container['is_user_role'];
    }

    /**
     * Sets is_user_role
     * @param bool $is_user_role
     * @return $this
     */
    public function setIsUserRole($is_user_role)
    {
        $this->container['is_user_role'] = $is_user_role;

        return $this;
    }

    /**
     * Gets has_auto_apply
     * @return bool
     */
    public function getHasAutoApply()
    {
        return $this->container['has_auto_apply'];
    }

    /**
     * Sets has_auto_apply
     * @param bool $has_auto_apply
     * @return $this
     */
    public function setHasAutoApply($has_auto_apply)
    {
        $this->container['has_auto_apply'] = $has_auto_apply;

        return $this;
    }

    /**
     * Gets not
     * @return bool
     */
    public function getNot()
    {
        return $this->container['not'];
    }

    /**
     * Sets not
     * @param bool $not
     * @return $this
     */
    public function setNot($not)
    {
        $this->container['not'] = $not;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


