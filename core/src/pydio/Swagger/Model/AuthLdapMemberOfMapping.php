<?php
/**
 * AuthLdapMemberOfMapping
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AuthLdapMemberOfMapping Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AuthLdapMemberOfMapping implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'authLdapMemberOfMapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mapping' => '\Swagger\Client\Model\AuthLdapMapping',
        'group_filter' => '\Swagger\Client\Model\AuthLdapSearchFilter',
        'support_nested_group' => 'bool',
        'real_member_of' => 'bool',
        'real_member_of_attribute' => 'string',
        'real_member_of_value_format' => 'string',
        'pydio_member_of_attribute' => 'string',
        'pydio_member_of_value_format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mapping' => null,
        'group_filter' => null,
        'support_nested_group' => 'boolean',
        'real_member_of' => 'boolean',
        'real_member_of_attribute' => null,
        'real_member_of_value_format' => null,
        'pydio_member_of_attribute' => null,
        'pydio_member_of_value_format' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'mapping' => 'Mapping',
        'group_filter' => 'GroupFilter',
        'support_nested_group' => 'SupportNestedGroup',
        'real_member_of' => 'RealMemberOf',
        'real_member_of_attribute' => 'RealMemberOfAttribute',
        'real_member_of_value_format' => 'RealMemberOfValueFormat',
        'pydio_member_of_attribute' => 'PydioMemberOfAttribute',
        'pydio_member_of_value_format' => 'PydioMemberOfValueFormat'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'mapping' => 'setMapping',
        'group_filter' => 'setGroupFilter',
        'support_nested_group' => 'setSupportNestedGroup',
        'real_member_of' => 'setRealMemberOf',
        'real_member_of_attribute' => 'setRealMemberOfAttribute',
        'real_member_of_value_format' => 'setRealMemberOfValueFormat',
        'pydio_member_of_attribute' => 'setPydioMemberOfAttribute',
        'pydio_member_of_value_format' => 'setPydioMemberOfValueFormat'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'mapping' => 'getMapping',
        'group_filter' => 'getGroupFilter',
        'support_nested_group' => 'getSupportNestedGroup',
        'real_member_of' => 'getRealMemberOf',
        'real_member_of_attribute' => 'getRealMemberOfAttribute',
        'real_member_of_value_format' => 'getRealMemberOfValueFormat',
        'pydio_member_of_attribute' => 'getPydioMemberOfAttribute',
        'pydio_member_of_value_format' => 'getPydioMemberOfValueFormat'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mapping'] = isset($data['mapping']) ? $data['mapping'] : null;
        $this->container['group_filter'] = isset($data['group_filter']) ? $data['group_filter'] : null;
        $this->container['support_nested_group'] = isset($data['support_nested_group']) ? $data['support_nested_group'] : null;
        $this->container['real_member_of'] = isset($data['real_member_of']) ? $data['real_member_of'] : null;
        $this->container['real_member_of_attribute'] = isset($data['real_member_of_attribute']) ? $data['real_member_of_attribute'] : null;
        $this->container['real_member_of_value_format'] = isset($data['real_member_of_value_format']) ? $data['real_member_of_value_format'] : null;
        $this->container['pydio_member_of_attribute'] = isset($data['pydio_member_of_attribute']) ? $data['pydio_member_of_attribute'] : null;
        $this->container['pydio_member_of_value_format'] = isset($data['pydio_member_of_value_format']) ? $data['pydio_member_of_value_format'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets mapping
     * @return \Swagger\Client\Model\AuthLdapMapping
     */
    public function getMapping()
    {
        return $this->container['mapping'];
    }

    /**
     * Sets mapping
     * @param \Swagger\Client\Model\AuthLdapMapping $mapping
     * @return $this
     */
    public function setMapping($mapping)
    {
        $this->container['mapping'] = $mapping;

        return $this;
    }

    /**
     * Gets group_filter
     * @return \Swagger\Client\Model\AuthLdapSearchFilter
     */
    public function getGroupFilter()
    {
        return $this->container['group_filter'];
    }

    /**
     * Sets group_filter
     * @param \Swagger\Client\Model\AuthLdapSearchFilter $group_filter
     * @return $this
     */
    public function setGroupFilter($group_filter)
    {
        $this->container['group_filter'] = $group_filter;

        return $this;
    }

    /**
     * Gets support_nested_group
     * @return bool
     */
    public function getSupportNestedGroup()
    {
        return $this->container['support_nested_group'];
    }

    /**
     * Sets support_nested_group
     * @param bool $support_nested_group
     * @return $this
     */
    public function setSupportNestedGroup($support_nested_group)
    {
        $this->container['support_nested_group'] = $support_nested_group;

        return $this;
    }

    /**
     * Gets real_member_of
     * @return bool
     */
    public function getRealMemberOf()
    {
        return $this->container['real_member_of'];
    }

    /**
     * Sets real_member_of
     * @param bool $real_member_of
     * @return $this
     */
    public function setRealMemberOf($real_member_of)
    {
        $this->container['real_member_of'] = $real_member_of;

        return $this;
    }

    /**
     * Gets real_member_of_attribute
     * @return string
     */
    public function getRealMemberOfAttribute()
    {
        return $this->container['real_member_of_attribute'];
    }

    /**
     * Sets real_member_of_attribute
     * @param string $real_member_of_attribute
     * @return $this
     */
    public function setRealMemberOfAttribute($real_member_of_attribute)
    {
        $this->container['real_member_of_attribute'] = $real_member_of_attribute;

        return $this;
    }

    /**
     * Gets real_member_of_value_format
     * @return string
     */
    public function getRealMemberOfValueFormat()
    {
        return $this->container['real_member_of_value_format'];
    }

    /**
     * Sets real_member_of_value_format
     * @param string $real_member_of_value_format
     * @return $this
     */
    public function setRealMemberOfValueFormat($real_member_of_value_format)
    {
        $this->container['real_member_of_value_format'] = $real_member_of_value_format;

        return $this;
    }

    /**
     * Gets pydio_member_of_attribute
     * @return string
     */
    public function getPydioMemberOfAttribute()
    {
        return $this->container['pydio_member_of_attribute'];
    }

    /**
     * Sets pydio_member_of_attribute
     * @param string $pydio_member_of_attribute
     * @return $this
     */
    public function setPydioMemberOfAttribute($pydio_member_of_attribute)
    {
        $this->container['pydio_member_of_attribute'] = $pydio_member_of_attribute;

        return $this;
    }

    /**
     * Gets pydio_member_of_value_format
     * @return string
     */
    public function getPydioMemberOfValueFormat()
    {
        return $this->container['pydio_member_of_value_format'];
    }

    /**
     * Sets pydio_member_of_value_format
     * @param string $pydio_member_of_value_format
     * @return $this
     */
    public function setPydioMemberOfValueFormat($pydio_member_of_value_format)
    {
        $this->container['pydio_member_of_value_format'] = $pydio_member_of_value_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


