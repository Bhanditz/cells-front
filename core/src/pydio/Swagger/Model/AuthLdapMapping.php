<?php
/**
 * AuthLdapMapping
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AuthLdapMapping Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AuthLdapMapping implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'authLdapMapping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'left_attribute' => 'string',
        'right_attribute' => 'string',
        'rule_string' => 'string',
        'role_prefix' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'left_attribute' => null,
        'right_attribute' => null,
        'rule_string' => null,
        'role_prefix' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'left_attribute' => 'LeftAttribute',
        'right_attribute' => 'RightAttribute',
        'rule_string' => 'RuleString',
        'role_prefix' => 'RolePrefix'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'left_attribute' => 'setLeftAttribute',
        'right_attribute' => 'setRightAttribute',
        'rule_string' => 'setRuleString',
        'role_prefix' => 'setRolePrefix'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'left_attribute' => 'getLeftAttribute',
        'right_attribute' => 'getRightAttribute',
        'rule_string' => 'getRuleString',
        'role_prefix' => 'getRolePrefix'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['left_attribute'] = isset($data['left_attribute']) ? $data['left_attribute'] : null;
        $this->container['right_attribute'] = isset($data['right_attribute']) ? $data['right_attribute'] : null;
        $this->container['rule_string'] = isset($data['rule_string']) ? $data['rule_string'] : null;
        $this->container['role_prefix'] = isset($data['role_prefix']) ? $data['role_prefix'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets left_attribute
     * @return string
     */
    public function getLeftAttribute()
    {
        return $this->container['left_attribute'];
    }

    /**
     * Sets left_attribute
     * @param string $left_attribute
     * @return $this
     */
    public function setLeftAttribute($left_attribute)
    {
        $this->container['left_attribute'] = $left_attribute;

        return $this;
    }

    /**
     * Gets right_attribute
     * @return string
     */
    public function getRightAttribute()
    {
        return $this->container['right_attribute'];
    }

    /**
     * Sets right_attribute
     * @param string $right_attribute
     * @return $this
     */
    public function setRightAttribute($right_attribute)
    {
        $this->container['right_attribute'] = $right_attribute;

        return $this;
    }

    /**
     * Gets rule_string
     * @return string
     */
    public function getRuleString()
    {
        return $this->container['rule_string'];
    }

    /**
     * Sets rule_string
     * @param string $rule_string
     * @return $this
     */
    public function setRuleString($rule_string)
    {
        $this->container['rule_string'] = $rule_string;

        return $this;
    }

    /**
     * Gets role_prefix
     * @return string
     */
    public function getRolePrefix()
    {
        return $this->container['role_prefix'];
    }

    /**
     * Sets role_prefix
     * @param string $role_prefix
     * @return $this
     */
    public function setRolePrefix($role_prefix)
    {
        $this->container['role_prefix'] = $role_prefix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


