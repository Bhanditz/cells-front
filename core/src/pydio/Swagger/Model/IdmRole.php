<?php
/**
 * IdmRole
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IdmRole Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IdmRole implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'idmRole';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'label' => 'string',
        'is_team' => 'bool',
        'group_role' => 'bool',
        'user_role' => 'bool',
        'last_updated' => 'int',
        'auto_applies' => 'string[]',
        'policies' => '\Swagger\Client\Model\ServiceResourcePolicy[]',
        'policies_context_editable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'label' => null,
        'is_team' => 'boolean',
        'group_role' => 'boolean',
        'user_role' => 'boolean',
        'last_updated' => 'int32',
        'auto_applies' => null,
        'policies' => null,
        'policies_context_editable' => 'boolean'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'Uuid',
        'label' => 'Label',
        'is_team' => 'IsTeam',
        'group_role' => 'GroupRole',
        'user_role' => 'UserRole',
        'last_updated' => 'LastUpdated',
        'auto_applies' => 'AutoApplies',
        'policies' => 'Policies',
        'policies_context_editable' => 'PoliciesContextEditable'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'label' => 'setLabel',
        'is_team' => 'setIsTeam',
        'group_role' => 'setGroupRole',
        'user_role' => 'setUserRole',
        'last_updated' => 'setLastUpdated',
        'auto_applies' => 'setAutoApplies',
        'policies' => 'setPolicies',
        'policies_context_editable' => 'setPoliciesContextEditable'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'label' => 'getLabel',
        'is_team' => 'getIsTeam',
        'group_role' => 'getGroupRole',
        'user_role' => 'getUserRole',
        'last_updated' => 'getLastUpdated',
        'auto_applies' => 'getAutoApplies',
        'policies' => 'getPolicies',
        'policies_context_editable' => 'getPoliciesContextEditable'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['is_team'] = isset($data['is_team']) ? $data['is_team'] : null;
        $this->container['group_role'] = isset($data['group_role']) ? $data['group_role'] : null;
        $this->container['user_role'] = isset($data['user_role']) ? $data['user_role'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['auto_applies'] = isset($data['auto_applies']) ? $data['auto_applies'] : null;
        $this->container['policies'] = isset($data['policies']) ? $data['policies'] : null;
        $this->container['policies_context_editable'] = isset($data['policies_context_editable']) ? $data['policies_context_editable'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string $uuid
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets is_team
     * @return bool
     */
    public function getIsTeam()
    {
        return $this->container['is_team'];
    }

    /**
     * Sets is_team
     * @param bool $is_team
     * @return $this
     */
    public function setIsTeam($is_team)
    {
        $this->container['is_team'] = $is_team;

        return $this;
    }

    /**
     * Gets group_role
     * @return bool
     */
    public function getGroupRole()
    {
        return $this->container['group_role'];
    }

    /**
     * Sets group_role
     * @param bool $group_role
     * @return $this
     */
    public function setGroupRole($group_role)
    {
        $this->container['group_role'] = $group_role;

        return $this;
    }

    /**
     * Gets user_role
     * @return bool
     */
    public function getUserRole()
    {
        return $this->container['user_role'];
    }

    /**
     * Sets user_role
     * @param bool $user_role
     * @return $this
     */
    public function setUserRole($user_role)
    {
        $this->container['user_role'] = $user_role;

        return $this;
    }

    /**
     * Gets last_updated
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     * @param int $last_updated
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets auto_applies
     * @return string[]
     */
    public function getAutoApplies()
    {
        return $this->container['auto_applies'];
    }

    /**
     * Sets auto_applies
     * @param string[] $auto_applies
     * @return $this
     */
    public function setAutoApplies($auto_applies)
    {
        $this->container['auto_applies'] = $auto_applies;

        return $this;
    }

    /**
     * Gets policies
     * @return \Swagger\Client\Model\ServiceResourcePolicy[]
     */
    public function getPolicies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     * @param \Swagger\Client\Model\ServiceResourcePolicy[] $policies
     * @return $this
     */
    public function setPolicies($policies)
    {
        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets policies_context_editable
     * @return bool
     */
    public function getPoliciesContextEditable()
    {
        return $this->container['policies_context_editable'];
    }

    /**
     * Sets policies_context_editable
     * @param bool $policies_context_editable
     * @return $this
     */
    public function setPoliciesContextEditable($policies_context_editable)
    {
        $this->container['policies_context_editable'] = $policies_context_editable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


