<?php
/**
 * AuthLdapServerConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cell Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AuthLdapServerConfig Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AuthLdapServerConfig implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'authLdapServerConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'config_id' => 'string',
        'domain_name' => 'string',
        'host' => 'string',
        'connection' => 'string',
        'bind_dn' => 'string',
        'bind_pw' => 'string',
        'skip_verify_certificate' => 'bool',
        'root_ca' => 'string',
        'root_ca_data' => 'string',
        'page_size' => 'int',
        'user' => '\Swagger\Client\Model\AuthLdapSearchFilter',
        'mapping_rules' => '\Swagger\Client\Model\AuthLdapMapping[]',
        'member_of_mapping' => '\Swagger\Client\Model\AuthLdapMemberOfMapping',
        'role_prefix' => 'string',
        'schedule' => 'string',
        'scheduler_details' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'config_id' => null,
        'domain_name' => null,
        'host' => null,
        'connection' => null,
        'bind_dn' => null,
        'bind_pw' => null,
        'skip_verify_certificate' => 'boolean',
        'root_ca' => null,
        'root_ca_data' => null,
        'page_size' => 'int32',
        'user' => null,
        'mapping_rules' => null,
        'member_of_mapping' => null,
        'role_prefix' => null,
        'schedule' => null,
        'scheduler_details' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'config_id' => 'ConfigId',
        'domain_name' => 'DomainName',
        'host' => 'Host',
        'connection' => 'Connection',
        'bind_dn' => 'BindDN',
        'bind_pw' => 'BindPW',
        'skip_verify_certificate' => 'SkipVerifyCertificate',
        'root_ca' => 'RootCA',
        'root_ca_data' => 'RootCAData',
        'page_size' => 'PageSize',
        'user' => 'User',
        'mapping_rules' => 'MappingRules',
        'member_of_mapping' => 'MemberOfMapping',
        'role_prefix' => 'RolePrefix',
        'schedule' => 'Schedule',
        'scheduler_details' => 'SchedulerDetails'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'config_id' => 'setConfigId',
        'domain_name' => 'setDomainName',
        'host' => 'setHost',
        'connection' => 'setConnection',
        'bind_dn' => 'setBindDn',
        'bind_pw' => 'setBindPw',
        'skip_verify_certificate' => 'setSkipVerifyCertificate',
        'root_ca' => 'setRootCa',
        'root_ca_data' => 'setRootCaData',
        'page_size' => 'setPageSize',
        'user' => 'setUser',
        'mapping_rules' => 'setMappingRules',
        'member_of_mapping' => 'setMemberOfMapping',
        'role_prefix' => 'setRolePrefix',
        'schedule' => 'setSchedule',
        'scheduler_details' => 'setSchedulerDetails'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'config_id' => 'getConfigId',
        'domain_name' => 'getDomainName',
        'host' => 'getHost',
        'connection' => 'getConnection',
        'bind_dn' => 'getBindDn',
        'bind_pw' => 'getBindPw',
        'skip_verify_certificate' => 'getSkipVerifyCertificate',
        'root_ca' => 'getRootCa',
        'root_ca_data' => 'getRootCaData',
        'page_size' => 'getPageSize',
        'user' => 'getUser',
        'mapping_rules' => 'getMappingRules',
        'member_of_mapping' => 'getMemberOfMapping',
        'role_prefix' => 'getRolePrefix',
        'schedule' => 'getSchedule',
        'scheduler_details' => 'getSchedulerDetails'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['config_id'] = isset($data['config_id']) ? $data['config_id'] : null;
        $this->container['domain_name'] = isset($data['domain_name']) ? $data['domain_name'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['connection'] = isset($data['connection']) ? $data['connection'] : null;
        $this->container['bind_dn'] = isset($data['bind_dn']) ? $data['bind_dn'] : null;
        $this->container['bind_pw'] = isset($data['bind_pw']) ? $data['bind_pw'] : null;
        $this->container['skip_verify_certificate'] = isset($data['skip_verify_certificate']) ? $data['skip_verify_certificate'] : null;
        $this->container['root_ca'] = isset($data['root_ca']) ? $data['root_ca'] : null;
        $this->container['root_ca_data'] = isset($data['root_ca_data']) ? $data['root_ca_data'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['mapping_rules'] = isset($data['mapping_rules']) ? $data['mapping_rules'] : null;
        $this->container['member_of_mapping'] = isset($data['member_of_mapping']) ? $data['member_of_mapping'] : null;
        $this->container['role_prefix'] = isset($data['role_prefix']) ? $data['role_prefix'] : null;
        $this->container['schedule'] = isset($data['schedule']) ? $data['schedule'] : null;
        $this->container['scheduler_details'] = isset($data['scheduler_details']) ? $data['scheduler_details'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets config_id
     * @return string
     */
    public function getConfigId()
    {
        return $this->container['config_id'];
    }

    /**
     * Sets config_id
     * @param string $config_id
     * @return $this
     */
    public function setConfigId($config_id)
    {
        $this->container['config_id'] = $config_id;

        return $this;
    }

    /**
     * Gets domain_name
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     * @param string $domain_name
     * @return $this
     */
    public function setDomainName($domain_name)
    {
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets host
     * @return string
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     * @param string $host
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets connection
     * @return string
     */
    public function getConnection()
    {
        return $this->container['connection'];
    }

    /**
     * Sets connection
     * @param string $connection
     * @return $this
     */
    public function setConnection($connection)
    {
        $this->container['connection'] = $connection;

        return $this;
    }

    /**
     * Gets bind_dn
     * @return string
     */
    public function getBindDn()
    {
        return $this->container['bind_dn'];
    }

    /**
     * Sets bind_dn
     * @param string $bind_dn
     * @return $this
     */
    public function setBindDn($bind_dn)
    {
        $this->container['bind_dn'] = $bind_dn;

        return $this;
    }

    /**
     * Gets bind_pw
     * @return string
     */
    public function getBindPw()
    {
        return $this->container['bind_pw'];
    }

    /**
     * Sets bind_pw
     * @param string $bind_pw
     * @return $this
     */
    public function setBindPw($bind_pw)
    {
        $this->container['bind_pw'] = $bind_pw;

        return $this;
    }

    /**
     * Gets skip_verify_certificate
     * @return bool
     */
    public function getSkipVerifyCertificate()
    {
        return $this->container['skip_verify_certificate'];
    }

    /**
     * Sets skip_verify_certificate
     * @param bool $skip_verify_certificate
     * @return $this
     */
    public function setSkipVerifyCertificate($skip_verify_certificate)
    {
        $this->container['skip_verify_certificate'] = $skip_verify_certificate;

        return $this;
    }

    /**
     * Gets root_ca
     * @return string
     */
    public function getRootCa()
    {
        return $this->container['root_ca'];
    }

    /**
     * Sets root_ca
     * @param string $root_ca
     * @return $this
     */
    public function setRootCa($root_ca)
    {
        $this->container['root_ca'] = $root_ca;

        return $this;
    }

    /**
     * Gets root_ca_data
     * @return string
     */
    public function getRootCaData()
    {
        return $this->container['root_ca_data'];
    }

    /**
     * Sets root_ca_data
     * @param string $root_ca_data
     * @return $this
     */
    public function setRootCaData($root_ca_data)
    {
        $this->container['root_ca_data'] = $root_ca_data;

        return $this;
    }

    /**
     * Gets page_size
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     * @param int $page_size
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets user
     * @return \Swagger\Client\Model\AuthLdapSearchFilter
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param \Swagger\Client\Model\AuthLdapSearchFilter $user
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets mapping_rules
     * @return \Swagger\Client\Model\AuthLdapMapping[]
     */
    public function getMappingRules()
    {
        return $this->container['mapping_rules'];
    }

    /**
     * Sets mapping_rules
     * @param \Swagger\Client\Model\AuthLdapMapping[] $mapping_rules
     * @return $this
     */
    public function setMappingRules($mapping_rules)
    {
        $this->container['mapping_rules'] = $mapping_rules;

        return $this;
    }

    /**
     * Gets member_of_mapping
     * @return \Swagger\Client\Model\AuthLdapMemberOfMapping
     */
    public function getMemberOfMapping()
    {
        return $this->container['member_of_mapping'];
    }

    /**
     * Sets member_of_mapping
     * @param \Swagger\Client\Model\AuthLdapMemberOfMapping $member_of_mapping
     * @return $this
     */
    public function setMemberOfMapping($member_of_mapping)
    {
        $this->container['member_of_mapping'] = $member_of_mapping;

        return $this;
    }

    /**
     * Gets role_prefix
     * @return string
     */
    public function getRolePrefix()
    {
        return $this->container['role_prefix'];
    }

    /**
     * Sets role_prefix
     * @param string $role_prefix
     * @return $this
     */
    public function setRolePrefix($role_prefix)
    {
        $this->container['role_prefix'] = $role_prefix;

        return $this;
    }

    /**
     * Gets schedule
     * @return string
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     * @param string $schedule
     * @return $this
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets scheduler_details
     * @return string
     */
    public function getSchedulerDetails()
    {
        return $this->container['scheduler_details'];
    }

    /**
     * Sets scheduler_details
     * @param string $scheduler_details
     * @return $this
     */
    public function setSchedulerDetails($scheduler_details)
    {
        $this->container['scheduler_details'] = $scheduler_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


