<?php
/**
 * AuthLdapSearchFilter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AuthLdapSearchFilter Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AuthLdapSearchFilter implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'authLdapSearchFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'd_ns' => 'string[]',
        'filter' => 'string',
        'id_attribute' => 'string',
        'display_attribute' => 'string',
        'scope' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'd_ns' => null,
        'filter' => null,
        'id_attribute' => null,
        'display_attribute' => null,
        'scope' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'd_ns' => 'DNs',
        'filter' => 'Filter',
        'id_attribute' => 'IDAttribute',
        'display_attribute' => 'DisplayAttribute',
        'scope' => 'Scope'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'd_ns' => 'setDNs',
        'filter' => 'setFilter',
        'id_attribute' => 'setIdAttribute',
        'display_attribute' => 'setDisplayAttribute',
        'scope' => 'setScope'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'd_ns' => 'getDNs',
        'filter' => 'getFilter',
        'id_attribute' => 'getIdAttribute',
        'display_attribute' => 'getDisplayAttribute',
        'scope' => 'getScope'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['d_ns'] = isset($data['d_ns']) ? $data['d_ns'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['id_attribute'] = isset($data['id_attribute']) ? $data['id_attribute'] : null;
        $this->container['display_attribute'] = isset($data['display_attribute']) ? $data['display_attribute'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets d_ns
     * @return string[]
     */
    public function getDNs()
    {
        return $this->container['d_ns'];
    }

    /**
     * Sets d_ns
     * @param string[] $d_ns
     * @return $this
     */
    public function setDNs($d_ns)
    {
        $this->container['d_ns'] = $d_ns;

        return $this;
    }

    /**
     * Gets filter
     * @return string
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     * @param string $filter
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets id_attribute
     * @return string
     */
    public function getIdAttribute()
    {
        return $this->container['id_attribute'];
    }

    /**
     * Sets id_attribute
     * @param string $id_attribute
     * @return $this
     */
    public function setIdAttribute($id_attribute)
    {
        $this->container['id_attribute'] = $id_attribute;

        return $this;
    }

    /**
     * Gets display_attribute
     * @return string
     */
    public function getDisplayAttribute()
    {
        return $this->container['display_attribute'];
    }

    /**
     * Sets display_attribute
     * @param string $display_attribute
     * @return $this
     */
    public function setDisplayAttribute($display_attribute)
    {
        $this->container['display_attribute'] = $display_attribute;

        return $this;
    }

    /**
     * Gets scope
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     * @param string $scope
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


