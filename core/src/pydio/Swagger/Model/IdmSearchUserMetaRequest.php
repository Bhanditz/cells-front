<?php
/**
 * IdmSearchUserMetaRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IdmSearchUserMetaRequest Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IdmSearchUserMetaRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'idmSearchUserMetaRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'meta_uuids' => 'string[]',
        'node_uuids' => 'string[]',
        'namespace' => 'string',
        'resource_subject_owner' => 'string',
        'resource_query' => '\Swagger\Client\Model\ServiceResourcePolicyQuery'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'meta_uuids' => null,
        'node_uuids' => null,
        'namespace' => null,
        'resource_subject_owner' => null,
        'resource_query' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'meta_uuids' => 'MetaUuids',
        'node_uuids' => 'NodeUuids',
        'namespace' => 'Namespace',
        'resource_subject_owner' => 'ResourceSubjectOwner',
        'resource_query' => 'ResourceQuery'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'meta_uuids' => 'setMetaUuids',
        'node_uuids' => 'setNodeUuids',
        'namespace' => 'setNamespace',
        'resource_subject_owner' => 'setResourceSubjectOwner',
        'resource_query' => 'setResourceQuery'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'meta_uuids' => 'getMetaUuids',
        'node_uuids' => 'getNodeUuids',
        'namespace' => 'getNamespace',
        'resource_subject_owner' => 'getResourceSubjectOwner',
        'resource_query' => 'getResourceQuery'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['meta_uuids'] = isset($data['meta_uuids']) ? $data['meta_uuids'] : null;
        $this->container['node_uuids'] = isset($data['node_uuids']) ? $data['node_uuids'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['resource_subject_owner'] = isset($data['resource_subject_owner']) ? $data['resource_subject_owner'] : null;
        $this->container['resource_query'] = isset($data['resource_query']) ? $data['resource_query'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets meta_uuids
     * @return string[]
     */
    public function getMetaUuids()
    {
        return $this->container['meta_uuids'];
    }

    /**
     * Sets meta_uuids
     * @param string[] $meta_uuids
     * @return $this
     */
    public function setMetaUuids($meta_uuids)
    {
        $this->container['meta_uuids'] = $meta_uuids;

        return $this;
    }

    /**
     * Gets node_uuids
     * @return string[]
     */
    public function getNodeUuids()
    {
        return $this->container['node_uuids'];
    }

    /**
     * Sets node_uuids
     * @param string[] $node_uuids
     * @return $this
     */
    public function setNodeUuids($node_uuids)
    {
        $this->container['node_uuids'] = $node_uuids;

        return $this;
    }

    /**
     * Gets namespace
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     * @param string $namespace
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets resource_subject_owner
     * @return string
     */
    public function getResourceSubjectOwner()
    {
        return $this->container['resource_subject_owner'];
    }

    /**
     * Sets resource_subject_owner
     * @param string $resource_subject_owner
     * @return $this
     */
    public function setResourceSubjectOwner($resource_subject_owner)
    {
        $this->container['resource_subject_owner'] = $resource_subject_owner;

        return $this;
    }

    /**
     * Gets resource_query
     * @return \Swagger\Client\Model\ServiceResourcePolicyQuery
     */
    public function getResourceQuery()
    {
        return $this->container['resource_query'];
    }

    /**
     * Sets resource_query
     * @param \Swagger\Client\Model\ServiceResourcePolicyQuery $resource_query
     * @return $this
     */
    public function setResourceQuery($resource_query)
    {
        $this->container['resource_query'] = $resource_query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


