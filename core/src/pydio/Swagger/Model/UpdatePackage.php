<?php
/**
 * UpdatePackage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UpdatePackage Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UpdatePackage implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'updatePackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_name' => 'string',
        'version' => 'string',
        'release_date' => 'int',
        'label' => 'string',
        'description' => 'string',
        'change_log' => 'string',
        'license' => 'string',
        'binary_url' => 'string',
        'binary_checksum' => 'string',
        'binary_signature' => 'string',
        'binary_hash_type' => 'string',
        'binary_size' => 'string',
        'binary_os' => 'string',
        'binary_arch' => 'string',
        'is_patch' => 'bool',
        'patch_algorithm' => 'string',
        'service_name' => 'string',
        'status' => '\Swagger\Client\Model\PackagePackageStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_name' => null,
        'version' => null,
        'release_date' => 'int32',
        'label' => null,
        'description' => null,
        'change_log' => null,
        'license' => null,
        'binary_url' => null,
        'binary_checksum' => null,
        'binary_signature' => null,
        'binary_hash_type' => null,
        'binary_size' => 'int64',
        'binary_os' => null,
        'binary_arch' => null,
        'is_patch' => 'boolean',
        'patch_algorithm' => null,
        'service_name' => null,
        'status' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'package_name' => 'PackageName',
        'version' => 'Version',
        'release_date' => 'ReleaseDate',
        'label' => 'Label',
        'description' => 'Description',
        'change_log' => 'ChangeLog',
        'license' => 'License',
        'binary_url' => 'BinaryURL',
        'binary_checksum' => 'BinaryChecksum',
        'binary_signature' => 'BinarySignature',
        'binary_hash_type' => 'BinaryHashType',
        'binary_size' => 'BinarySize',
        'binary_os' => 'BinaryOS',
        'binary_arch' => 'BinaryArch',
        'is_patch' => 'IsPatch',
        'patch_algorithm' => 'PatchAlgorithm',
        'service_name' => 'ServiceName',
        'status' => 'Status'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'package_name' => 'setPackageName',
        'version' => 'setVersion',
        'release_date' => 'setReleaseDate',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'change_log' => 'setChangeLog',
        'license' => 'setLicense',
        'binary_url' => 'setBinaryUrl',
        'binary_checksum' => 'setBinaryChecksum',
        'binary_signature' => 'setBinarySignature',
        'binary_hash_type' => 'setBinaryHashType',
        'binary_size' => 'setBinarySize',
        'binary_os' => 'setBinaryOs',
        'binary_arch' => 'setBinaryArch',
        'is_patch' => 'setIsPatch',
        'patch_algorithm' => 'setPatchAlgorithm',
        'service_name' => 'setServiceName',
        'status' => 'setStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'package_name' => 'getPackageName',
        'version' => 'getVersion',
        'release_date' => 'getReleaseDate',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'change_log' => 'getChangeLog',
        'license' => 'getLicense',
        'binary_url' => 'getBinaryUrl',
        'binary_checksum' => 'getBinaryChecksum',
        'binary_signature' => 'getBinarySignature',
        'binary_hash_type' => 'getBinaryHashType',
        'binary_size' => 'getBinarySize',
        'binary_os' => 'getBinaryOs',
        'binary_arch' => 'getBinaryArch',
        'is_patch' => 'getIsPatch',
        'patch_algorithm' => 'getPatchAlgorithm',
        'service_name' => 'getServiceName',
        'status' => 'getStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_name'] = isset($data['package_name']) ? $data['package_name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['change_log'] = isset($data['change_log']) ? $data['change_log'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['binary_url'] = isset($data['binary_url']) ? $data['binary_url'] : null;
        $this->container['binary_checksum'] = isset($data['binary_checksum']) ? $data['binary_checksum'] : null;
        $this->container['binary_signature'] = isset($data['binary_signature']) ? $data['binary_signature'] : null;
        $this->container['binary_hash_type'] = isset($data['binary_hash_type']) ? $data['binary_hash_type'] : null;
        $this->container['binary_size'] = isset($data['binary_size']) ? $data['binary_size'] : null;
        $this->container['binary_os'] = isset($data['binary_os']) ? $data['binary_os'] : null;
        $this->container['binary_arch'] = isset($data['binary_arch']) ? $data['binary_arch'] : null;
        $this->container['is_patch'] = isset($data['is_patch']) ? $data['is_patch'] : null;
        $this->container['patch_algorithm'] = isset($data['patch_algorithm']) ? $data['patch_algorithm'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets package_name
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['package_name'];
    }

    /**
     * Sets package_name
     * @param string $package_name
     * @return $this
     */
    public function setPackageName($package_name)
    {
        $this->container['package_name'] = $package_name;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets release_date
     * @return int
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     * @param int $release_date
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets change_log
     * @return string
     */
    public function getChangeLog()
    {
        return $this->container['change_log'];
    }

    /**
     * Sets change_log
     * @param string $change_log
     * @return $this
     */
    public function setChangeLog($change_log)
    {
        $this->container['change_log'] = $change_log;

        return $this;
    }

    /**
     * Gets license
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     * @param string $license
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets binary_url
     * @return string
     */
    public function getBinaryUrl()
    {
        return $this->container['binary_url'];
    }

    /**
     * Sets binary_url
     * @param string $binary_url
     * @return $this
     */
    public function setBinaryUrl($binary_url)
    {
        $this->container['binary_url'] = $binary_url;

        return $this;
    }

    /**
     * Gets binary_checksum
     * @return string
     */
    public function getBinaryChecksum()
    {
        return $this->container['binary_checksum'];
    }

    /**
     * Sets binary_checksum
     * @param string $binary_checksum
     * @return $this
     */
    public function setBinaryChecksum($binary_checksum)
    {
        $this->container['binary_checksum'] = $binary_checksum;

        return $this;
    }

    /**
     * Gets binary_signature
     * @return string
     */
    public function getBinarySignature()
    {
        return $this->container['binary_signature'];
    }

    /**
     * Sets binary_signature
     * @param string $binary_signature
     * @return $this
     */
    public function setBinarySignature($binary_signature)
    {
        $this->container['binary_signature'] = $binary_signature;

        return $this;
    }

    /**
     * Gets binary_hash_type
     * @return string
     */
    public function getBinaryHashType()
    {
        return $this->container['binary_hash_type'];
    }

    /**
     * Sets binary_hash_type
     * @param string $binary_hash_type
     * @return $this
     */
    public function setBinaryHashType($binary_hash_type)
    {
        $this->container['binary_hash_type'] = $binary_hash_type;

        return $this;
    }

    /**
     * Gets binary_size
     * @return string
     */
    public function getBinarySize()
    {
        return $this->container['binary_size'];
    }

    /**
     * Sets binary_size
     * @param string $binary_size
     * @return $this
     */
    public function setBinarySize($binary_size)
    {
        $this->container['binary_size'] = $binary_size;

        return $this;
    }

    /**
     * Gets binary_os
     * @return string
     */
    public function getBinaryOs()
    {
        return $this->container['binary_os'];
    }

    /**
     * Sets binary_os
     * @param string $binary_os
     * @return $this
     */
    public function setBinaryOs($binary_os)
    {
        $this->container['binary_os'] = $binary_os;

        return $this;
    }

    /**
     * Gets binary_arch
     * @return string
     */
    public function getBinaryArch()
    {
        return $this->container['binary_arch'];
    }

    /**
     * Sets binary_arch
     * @param string $binary_arch
     * @return $this
     */
    public function setBinaryArch($binary_arch)
    {
        $this->container['binary_arch'] = $binary_arch;

        return $this;
    }

    /**
     * Gets is_patch
     * @return bool
     */
    public function getIsPatch()
    {
        return $this->container['is_patch'];
    }

    /**
     * Sets is_patch
     * @param bool $is_patch
     * @return $this
     */
    public function setIsPatch($is_patch)
    {
        $this->container['is_patch'] = $is_patch;

        return $this;
    }

    /**
     * Gets patch_algorithm
     * @return string
     */
    public function getPatchAlgorithm()
    {
        return $this->container['patch_algorithm'];
    }

    /**
     * Sets patch_algorithm
     * @param string $patch_algorithm
     * @return $this
     */
    public function setPatchAlgorithm($patch_algorithm)
    {
        $this->container['patch_algorithm'] = $patch_algorithm;

        return $this;
    }

    /**
     * Gets service_name
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     * @param string $service_name
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets status
     * @return \Swagger\Client\Model\PackagePackageStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Swagger\Client\Model\PackagePackageStatus $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


