<?php
/**
 * JobsTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cell Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * JobsTask Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JobsTask implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'jobsTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'job_id' => 'string',
        'status' => '\Swagger\Client\Model\JobsTaskStatus',
        'status_message' => 'string',
        'trigger_owner' => 'string',
        'start_time' => 'int',
        'end_time' => 'int',
        'can_stop' => 'bool',
        'can_pause' => 'bool',
        'has_progress' => 'bool',
        'progress' => 'float',
        'actions_logs' => '\Swagger\Client\Model\JobsActionLog[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'job_id' => null,
        'status' => null,
        'status_message' => null,
        'trigger_owner' => null,
        'start_time' => 'int32',
        'end_time' => 'int32',
        'can_stop' => 'boolean',
        'can_pause' => 'boolean',
        'has_progress' => 'boolean',
        'progress' => 'float',
        'actions_logs' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'job_id' => 'JobID',
        'status' => 'Status',
        'status_message' => 'StatusMessage',
        'trigger_owner' => 'TriggerOwner',
        'start_time' => 'StartTime',
        'end_time' => 'EndTime',
        'can_stop' => 'CanStop',
        'can_pause' => 'CanPause',
        'has_progress' => 'HasProgress',
        'progress' => 'Progress',
        'actions_logs' => 'ActionsLogs'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'job_id' => 'setJobId',
        'status' => 'setStatus',
        'status_message' => 'setStatusMessage',
        'trigger_owner' => 'setTriggerOwner',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'can_stop' => 'setCanStop',
        'can_pause' => 'setCanPause',
        'has_progress' => 'setHasProgress',
        'progress' => 'setProgress',
        'actions_logs' => 'setActionsLogs'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'job_id' => 'getJobId',
        'status' => 'getStatus',
        'status_message' => 'getStatusMessage',
        'trigger_owner' => 'getTriggerOwner',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'can_stop' => 'getCanStop',
        'can_pause' => 'getCanPause',
        'has_progress' => 'getHasProgress',
        'progress' => 'getProgress',
        'actions_logs' => 'getActionsLogs'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_message'] = isset($data['status_message']) ? $data['status_message'] : null;
        $this->container['trigger_owner'] = isset($data['trigger_owner']) ? $data['trigger_owner'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['can_stop'] = isset($data['can_stop']) ? $data['can_stop'] : null;
        $this->container['can_pause'] = isset($data['can_pause']) ? $data['can_pause'] : null;
        $this->container['has_progress'] = isset($data['has_progress']) ? $data['has_progress'] : null;
        $this->container['progress'] = isset($data['progress']) ? $data['progress'] : null;
        $this->container['actions_logs'] = isset($data['actions_logs']) ? $data['actions_logs'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets job_id
     * @return string
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     * @param string $job_id
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets status
     * @return \Swagger\Client\Model\JobsTaskStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Swagger\Client\Model\JobsTaskStatus $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_message
     * @return string
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }

    /**
     * Sets status_message
     * @param string $status_message
     * @return $this
     */
    public function setStatusMessage($status_message)
    {
        $this->container['status_message'] = $status_message;

        return $this;
    }

    /**
     * Gets trigger_owner
     * @return string
     */
    public function getTriggerOwner()
    {
        return $this->container['trigger_owner'];
    }

    /**
     * Sets trigger_owner
     * @param string $trigger_owner
     * @return $this
     */
    public function setTriggerOwner($trigger_owner)
    {
        $this->container['trigger_owner'] = $trigger_owner;

        return $this;
    }

    /**
     * Gets start_time
     * @return int
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param int $start_time
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     * @return int
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     * @param int $end_time
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets can_stop
     * @return bool
     */
    public function getCanStop()
    {
        return $this->container['can_stop'];
    }

    /**
     * Sets can_stop
     * @param bool $can_stop
     * @return $this
     */
    public function setCanStop($can_stop)
    {
        $this->container['can_stop'] = $can_stop;

        return $this;
    }

    /**
     * Gets can_pause
     * @return bool
     */
    public function getCanPause()
    {
        return $this->container['can_pause'];
    }

    /**
     * Sets can_pause
     * @param bool $can_pause
     * @return $this
     */
    public function setCanPause($can_pause)
    {
        $this->container['can_pause'] = $can_pause;

        return $this;
    }

    /**
     * Gets has_progress
     * @return bool
     */
    public function getHasProgress()
    {
        return $this->container['has_progress'];
    }

    /**
     * Sets has_progress
     * @param bool $has_progress
     * @return $this
     */
    public function setHasProgress($has_progress)
    {
        $this->container['has_progress'] = $has_progress;

        return $this;
    }

    /**
     * Gets progress
     * @return float
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     * @param float $progress
     * @return $this
     */
    public function setProgress($progress)
    {
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets actions_logs
     * @return \Swagger\Client\Model\JobsActionLog[]
     */
    public function getActionsLogs()
    {
        return $this->container['actions_logs'];
    }

    /**
     * Sets actions_logs
     * @param \Swagger\Client\Model\JobsActionLog[] $actions_logs
     * @return $this
     */
    public function setActionsLogs($actions_logs)
    {
        $this->container['actions_logs'] = $actions_logs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


