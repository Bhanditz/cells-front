<?php
/**
 * RestShareLink
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RestShareLink Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RestShareLink implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'restShareLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'link_hash' => 'string',
        'link_url' => 'string',
        'label' => 'string',
        'description' => 'string',
        'user_uuid' => 'string',
        'user_login' => 'string',
        'password_required' => 'bool',
        'access_start' => 'string',
        'access_end' => 'string',
        'max_downloads' => 'string',
        'current_downloads' => 'string',
        'view_template_name' => 'string',
        'target_users' => 'map[string,\Swagger\Client\Model\RestShareLinkTargetUser]',
        'restrict_to_target_users' => 'bool',
        'root_nodes' => '\Swagger\Client\Model\TreeNode[]',
        'permissions' => '\Swagger\Client\Model\RestShareLinkAccessType[]',
        'policies' => '\Swagger\Client\Model\ServiceResourcePolicy[]',
        'policies_context_editable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'link_hash' => null,
        'link_url' => null,
        'label' => null,
        'description' => null,
        'user_uuid' => null,
        'user_login' => null,
        'password_required' => 'boolean',
        'access_start' => 'int64',
        'access_end' => 'int64',
        'max_downloads' => 'int64',
        'current_downloads' => 'int64',
        'view_template_name' => null,
        'target_users' => null,
        'restrict_to_target_users' => 'boolean',
        'root_nodes' => null,
        'permissions' => null,
        'policies' => null,
        'policies_context_editable' => 'boolean'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'Uuid',
        'link_hash' => 'LinkHash',
        'link_url' => 'LinkUrl',
        'label' => 'Label',
        'description' => 'Description',
        'user_uuid' => 'UserUuid',
        'user_login' => 'UserLogin',
        'password_required' => 'PasswordRequired',
        'access_start' => 'AccessStart',
        'access_end' => 'AccessEnd',
        'max_downloads' => 'MaxDownloads',
        'current_downloads' => 'CurrentDownloads',
        'view_template_name' => 'ViewTemplateName',
        'target_users' => 'TargetUsers',
        'restrict_to_target_users' => 'RestrictToTargetUsers',
        'root_nodes' => 'RootNodes',
        'permissions' => 'Permissions',
        'policies' => 'Policies',
        'policies_context_editable' => 'PoliciesContextEditable'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'link_hash' => 'setLinkHash',
        'link_url' => 'setLinkUrl',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'user_uuid' => 'setUserUuid',
        'user_login' => 'setUserLogin',
        'password_required' => 'setPasswordRequired',
        'access_start' => 'setAccessStart',
        'access_end' => 'setAccessEnd',
        'max_downloads' => 'setMaxDownloads',
        'current_downloads' => 'setCurrentDownloads',
        'view_template_name' => 'setViewTemplateName',
        'target_users' => 'setTargetUsers',
        'restrict_to_target_users' => 'setRestrictToTargetUsers',
        'root_nodes' => 'setRootNodes',
        'permissions' => 'setPermissions',
        'policies' => 'setPolicies',
        'policies_context_editable' => 'setPoliciesContextEditable'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'link_hash' => 'getLinkHash',
        'link_url' => 'getLinkUrl',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'user_uuid' => 'getUserUuid',
        'user_login' => 'getUserLogin',
        'password_required' => 'getPasswordRequired',
        'access_start' => 'getAccessStart',
        'access_end' => 'getAccessEnd',
        'max_downloads' => 'getMaxDownloads',
        'current_downloads' => 'getCurrentDownloads',
        'view_template_name' => 'getViewTemplateName',
        'target_users' => 'getTargetUsers',
        'restrict_to_target_users' => 'getRestrictToTargetUsers',
        'root_nodes' => 'getRootNodes',
        'permissions' => 'getPermissions',
        'policies' => 'getPolicies',
        'policies_context_editable' => 'getPoliciesContextEditable'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['link_hash'] = isset($data['link_hash']) ? $data['link_hash'] : null;
        $this->container['link_url'] = isset($data['link_url']) ? $data['link_url'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['user_uuid'] = isset($data['user_uuid']) ? $data['user_uuid'] : null;
        $this->container['user_login'] = isset($data['user_login']) ? $data['user_login'] : null;
        $this->container['password_required'] = isset($data['password_required']) ? $data['password_required'] : null;
        $this->container['access_start'] = isset($data['access_start']) ? $data['access_start'] : null;
        $this->container['access_end'] = isset($data['access_end']) ? $data['access_end'] : null;
        $this->container['max_downloads'] = isset($data['max_downloads']) ? $data['max_downloads'] : null;
        $this->container['current_downloads'] = isset($data['current_downloads']) ? $data['current_downloads'] : null;
        $this->container['view_template_name'] = isset($data['view_template_name']) ? $data['view_template_name'] : null;
        $this->container['target_users'] = isset($data['target_users']) ? $data['target_users'] : null;
        $this->container['restrict_to_target_users'] = isset($data['restrict_to_target_users']) ? $data['restrict_to_target_users'] : null;
        $this->container['root_nodes'] = isset($data['root_nodes']) ? $data['root_nodes'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['policies'] = isset($data['policies']) ? $data['policies'] : null;
        $this->container['policies_context_editable'] = isset($data['policies_context_editable']) ? $data['policies_context_editable'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string $uuid
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets link_hash
     * @return string
     */
    public function getLinkHash()
    {
        return $this->container['link_hash'];
    }

    /**
     * Sets link_hash
     * @param string $link_hash
     * @return $this
     */
    public function setLinkHash($link_hash)
    {
        $this->container['link_hash'] = $link_hash;

        return $this;
    }

    /**
     * Gets link_url
     * @return string
     */
    public function getLinkUrl()
    {
        return $this->container['link_url'];
    }

    /**
     * Sets link_url
     * @param string $link_url
     * @return $this
     */
    public function setLinkUrl($link_url)
    {
        $this->container['link_url'] = $link_url;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets user_uuid
     * @return string
     */
    public function getUserUuid()
    {
        return $this->container['user_uuid'];
    }

    /**
     * Sets user_uuid
     * @param string $user_uuid
     * @return $this
     */
    public function setUserUuid($user_uuid)
    {
        $this->container['user_uuid'] = $user_uuid;

        return $this;
    }

    /**
     * Gets user_login
     * @return string
     */
    public function getUserLogin()
    {
        return $this->container['user_login'];
    }

    /**
     * Sets user_login
     * @param string $user_login
     * @return $this
     */
    public function setUserLogin($user_login)
    {
        $this->container['user_login'] = $user_login;

        return $this;
    }

    /**
     * Gets password_required
     * @return bool
     */
    public function getPasswordRequired()
    {
        return $this->container['password_required'];
    }

    /**
     * Sets password_required
     * @param bool $password_required
     * @return $this
     */
    public function setPasswordRequired($password_required)
    {
        $this->container['password_required'] = $password_required;

        return $this;
    }

    /**
     * Gets access_start
     * @return string
     */
    public function getAccessStart()
    {
        return $this->container['access_start'];
    }

    /**
     * Sets access_start
     * @param string $access_start
     * @return $this
     */
    public function setAccessStart($access_start)
    {
        $this->container['access_start'] = $access_start;

        return $this;
    }

    /**
     * Gets access_end
     * @return string
     */
    public function getAccessEnd()
    {
        return $this->container['access_end'];
    }

    /**
     * Sets access_end
     * @param string $access_end
     * @return $this
     */
    public function setAccessEnd($access_end)
    {
        $this->container['access_end'] = $access_end;

        return $this;
    }

    /**
     * Gets max_downloads
     * @return string
     */
    public function getMaxDownloads()
    {
        return $this->container['max_downloads'];
    }

    /**
     * Sets max_downloads
     * @param string $max_downloads
     * @return $this
     */
    public function setMaxDownloads($max_downloads)
    {
        $this->container['max_downloads'] = $max_downloads;

        return $this;
    }

    /**
     * Gets current_downloads
     * @return string
     */
    public function getCurrentDownloads()
    {
        return $this->container['current_downloads'];
    }

    /**
     * Sets current_downloads
     * @param string $current_downloads
     * @return $this
     */
    public function setCurrentDownloads($current_downloads)
    {
        $this->container['current_downloads'] = $current_downloads;

        return $this;
    }

    /**
     * Gets view_template_name
     * @return string
     */
    public function getViewTemplateName()
    {
        return $this->container['view_template_name'];
    }

    /**
     * Sets view_template_name
     * @param string $view_template_name
     * @return $this
     */
    public function setViewTemplateName($view_template_name)
    {
        $this->container['view_template_name'] = $view_template_name;

        return $this;
    }

    /**
     * Gets target_users
     * @return map[string,\Swagger\Client\Model\RestShareLinkTargetUser]
     */
    public function getTargetUsers()
    {
        return $this->container['target_users'];
    }

    /**
     * Sets target_users
     * @param map[string,\Swagger\Client\Model\RestShareLinkTargetUser] $target_users
     * @return $this
     */
    public function setTargetUsers($target_users)
    {
        $this->container['target_users'] = $target_users;

        return $this;
    }

    /**
     * Gets restrict_to_target_users
     * @return bool
     */
    public function getRestrictToTargetUsers()
    {
        return $this->container['restrict_to_target_users'];
    }

    /**
     * Sets restrict_to_target_users
     * @param bool $restrict_to_target_users
     * @return $this
     */
    public function setRestrictToTargetUsers($restrict_to_target_users)
    {
        $this->container['restrict_to_target_users'] = $restrict_to_target_users;

        return $this;
    }

    /**
     * Gets root_nodes
     * @return \Swagger\Client\Model\TreeNode[]
     */
    public function getRootNodes()
    {
        return $this->container['root_nodes'];
    }

    /**
     * Sets root_nodes
     * @param \Swagger\Client\Model\TreeNode[] $root_nodes
     * @return $this
     */
    public function setRootNodes($root_nodes)
    {
        $this->container['root_nodes'] = $root_nodes;

        return $this;
    }

    /**
     * Gets permissions
     * @return \Swagger\Client\Model\RestShareLinkAccessType[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     * @param \Swagger\Client\Model\RestShareLinkAccessType[] $permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets policies
     * @return \Swagger\Client\Model\ServiceResourcePolicy[]
     */
    public function getPolicies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     * @param \Swagger\Client\Model\ServiceResourcePolicy[] $policies
     * @return $this
     */
    public function setPolicies($policies)
    {
        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets policies_context_editable
     * @return bool
     */
    public function getPoliciesContextEditable()
    {
        return $this->container['policies_context_editable'];
    }

    /**
     * Sets policies_context_editable
     * @param bool $policies_context_editable
     * @return $this
     */
    public function setPoliciesContextEditable($policies_context_editable)
    {
        $this->container['policies_context_editable'] = $policies_context_editable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


