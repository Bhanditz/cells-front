<?php
/**
 * RestDiscoveryResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RestDiscoveryResponse Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RestDiscoveryResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'restDiscoveryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'package_type' => 'string',
        'package_label' => 'string',
        'version' => 'string',
        'build_stamp' => 'int',
        'build_revision' => 'string',
        'endpoints' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'package_type' => null,
        'package_label' => null,
        'version' => null,
        'build_stamp' => 'int32',
        'build_revision' => null,
        'endpoints' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'package_type' => 'PackageType',
        'package_label' => 'PackageLabel',
        'version' => 'Version',
        'build_stamp' => 'BuildStamp',
        'build_revision' => 'BuildRevision',
        'endpoints' => 'Endpoints'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'package_type' => 'setPackageType',
        'package_label' => 'setPackageLabel',
        'version' => 'setVersion',
        'build_stamp' => 'setBuildStamp',
        'build_revision' => 'setBuildRevision',
        'endpoints' => 'setEndpoints'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'package_type' => 'getPackageType',
        'package_label' => 'getPackageLabel',
        'version' => 'getVersion',
        'build_stamp' => 'getBuildStamp',
        'build_revision' => 'getBuildRevision',
        'endpoints' => 'getEndpoints'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
        $this->container['package_label'] = isset($data['package_label']) ? $data['package_label'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['build_stamp'] = isset($data['build_stamp']) ? $data['build_stamp'] : null;
        $this->container['build_revision'] = isset($data['build_revision']) ? $data['build_revision'] : null;
        $this->container['endpoints'] = isset($data['endpoints']) ? $data['endpoints'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets package_type
     * @return string
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     * @param string $package_type
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }

    /**
     * Gets package_label
     * @return string
     */
    public function getPackageLabel()
    {
        return $this->container['package_label'];
    }

    /**
     * Sets package_label
     * @param string $package_label
     * @return $this
     */
    public function setPackageLabel($package_label)
    {
        $this->container['package_label'] = $package_label;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets build_stamp
     * @return int
     */
    public function getBuildStamp()
    {
        return $this->container['build_stamp'];
    }

    /**
     * Sets build_stamp
     * @param int $build_stamp
     * @return $this
     */
    public function setBuildStamp($build_stamp)
    {
        $this->container['build_stamp'] = $build_stamp;

        return $this;
    }

    /**
     * Gets build_revision
     * @return string
     */
    public function getBuildRevision()
    {
        return $this->container['build_revision'];
    }

    /**
     * Sets build_revision
     * @param string $build_revision
     * @return $this
     */
    public function setBuildRevision($build_revision)
    {
        $this->container['build_revision'] = $build_revision;

        return $this;
    }

    /**
     * Gets endpoints
     * @return map[string,string]
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     * @param map[string,string] $endpoints
     * @return $this
     */
    public function setEndpoints($endpoints)
    {
        $this->container['endpoints'] = $endpoints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


