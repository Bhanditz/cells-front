<?php
/**
 * ObjectDataSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cell Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ObjectDataSource Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ObjectDataSource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'objectDataSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'disabled' => 'bool',
        'storage_type' => '\Swagger\Client\Model\ObjectStorageType',
        'storage_configuration' => 'map[string,string]',
        'objects_service_name' => 'string',
        'objects_host' => 'string',
        'objects_port' => 'int',
        'objects_secure' => 'bool',
        'objects_bucket' => 'string',
        'objects_base_folder' => 'string',
        'api_key' => 'string',
        'api_secret' => 'string',
        'peer_address' => 'string',
        'watch' => 'bool',
        'encryption_mode' => '\Swagger\Client\Model\ObjectEncryptionMode',
        'encryption_key' => 'string',
        'versioning_policy_name' => 'string',
        'creation_date' => 'int',
        'last_synchronization_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'disabled' => 'boolean',
        'storage_type' => null,
        'storage_configuration' => null,
        'objects_service_name' => null,
        'objects_host' => null,
        'objects_port' => 'int32',
        'objects_secure' => 'boolean',
        'objects_bucket' => null,
        'objects_base_folder' => null,
        'api_key' => null,
        'api_secret' => null,
        'peer_address' => null,
        'watch' => 'boolean',
        'encryption_mode' => null,
        'encryption_key' => null,
        'versioning_policy_name' => null,
        'creation_date' => 'int32',
        'last_synchronization_date' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'disabled' => 'Disabled',
        'storage_type' => 'StorageType',
        'storage_configuration' => 'StorageConfiguration',
        'objects_service_name' => 'ObjectsServiceName',
        'objects_host' => 'ObjectsHost',
        'objects_port' => 'ObjectsPort',
        'objects_secure' => 'ObjectsSecure',
        'objects_bucket' => 'ObjectsBucket',
        'objects_base_folder' => 'ObjectsBaseFolder',
        'api_key' => 'ApiKey',
        'api_secret' => 'ApiSecret',
        'peer_address' => 'PeerAddress',
        'watch' => 'Watch',
        'encryption_mode' => 'EncryptionMode',
        'encryption_key' => 'EncryptionKey',
        'versioning_policy_name' => 'VersioningPolicyName',
        'creation_date' => 'CreationDate',
        'last_synchronization_date' => 'LastSynchronizationDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'disabled' => 'setDisabled',
        'storage_type' => 'setStorageType',
        'storage_configuration' => 'setStorageConfiguration',
        'objects_service_name' => 'setObjectsServiceName',
        'objects_host' => 'setObjectsHost',
        'objects_port' => 'setObjectsPort',
        'objects_secure' => 'setObjectsSecure',
        'objects_bucket' => 'setObjectsBucket',
        'objects_base_folder' => 'setObjectsBaseFolder',
        'api_key' => 'setApiKey',
        'api_secret' => 'setApiSecret',
        'peer_address' => 'setPeerAddress',
        'watch' => 'setWatch',
        'encryption_mode' => 'setEncryptionMode',
        'encryption_key' => 'setEncryptionKey',
        'versioning_policy_name' => 'setVersioningPolicyName',
        'creation_date' => 'setCreationDate',
        'last_synchronization_date' => 'setLastSynchronizationDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'disabled' => 'getDisabled',
        'storage_type' => 'getStorageType',
        'storage_configuration' => 'getStorageConfiguration',
        'objects_service_name' => 'getObjectsServiceName',
        'objects_host' => 'getObjectsHost',
        'objects_port' => 'getObjectsPort',
        'objects_secure' => 'getObjectsSecure',
        'objects_bucket' => 'getObjectsBucket',
        'objects_base_folder' => 'getObjectsBaseFolder',
        'api_key' => 'getApiKey',
        'api_secret' => 'getApiSecret',
        'peer_address' => 'getPeerAddress',
        'watch' => 'getWatch',
        'encryption_mode' => 'getEncryptionMode',
        'encryption_key' => 'getEncryptionKey',
        'versioning_policy_name' => 'getVersioningPolicyName',
        'creation_date' => 'getCreationDate',
        'last_synchronization_date' => 'getLastSynchronizationDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['storage_type'] = isset($data['storage_type']) ? $data['storage_type'] : null;
        $this->container['storage_configuration'] = isset($data['storage_configuration']) ? $data['storage_configuration'] : null;
        $this->container['objects_service_name'] = isset($data['objects_service_name']) ? $data['objects_service_name'] : null;
        $this->container['objects_host'] = isset($data['objects_host']) ? $data['objects_host'] : null;
        $this->container['objects_port'] = isset($data['objects_port']) ? $data['objects_port'] : null;
        $this->container['objects_secure'] = isset($data['objects_secure']) ? $data['objects_secure'] : null;
        $this->container['objects_bucket'] = isset($data['objects_bucket']) ? $data['objects_bucket'] : null;
        $this->container['objects_base_folder'] = isset($data['objects_base_folder']) ? $data['objects_base_folder'] : null;
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['api_secret'] = isset($data['api_secret']) ? $data['api_secret'] : null;
        $this->container['peer_address'] = isset($data['peer_address']) ? $data['peer_address'] : null;
        $this->container['watch'] = isset($data['watch']) ? $data['watch'] : null;
        $this->container['encryption_mode'] = isset($data['encryption_mode']) ? $data['encryption_mode'] : null;
        $this->container['encryption_key'] = isset($data['encryption_key']) ? $data['encryption_key'] : null;
        $this->container['versioning_policy_name'] = isset($data['versioning_policy_name']) ? $data['versioning_policy_name'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['last_synchronization_date'] = isset($data['last_synchronization_date']) ? $data['last_synchronization_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets disabled
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     * @param bool $disabled
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets storage_type
     * @return \Swagger\Client\Model\ObjectStorageType
     */
    public function getStorageType()
    {
        return $this->container['storage_type'];
    }

    /**
     * Sets storage_type
     * @param \Swagger\Client\Model\ObjectStorageType $storage_type
     * @return $this
     */
    public function setStorageType($storage_type)
    {
        $this->container['storage_type'] = $storage_type;

        return $this;
    }

    /**
     * Gets storage_configuration
     * @return map[string,string]
     */
    public function getStorageConfiguration()
    {
        return $this->container['storage_configuration'];
    }

    /**
     * Sets storage_configuration
     * @param map[string,string] $storage_configuration
     * @return $this
     */
    public function setStorageConfiguration($storage_configuration)
    {
        $this->container['storage_configuration'] = $storage_configuration;

        return $this;
    }

    /**
     * Gets objects_service_name
     * @return string
     */
    public function getObjectsServiceName()
    {
        return $this->container['objects_service_name'];
    }

    /**
     * Sets objects_service_name
     * @param string $objects_service_name
     * @return $this
     */
    public function setObjectsServiceName($objects_service_name)
    {
        $this->container['objects_service_name'] = $objects_service_name;

        return $this;
    }

    /**
     * Gets objects_host
     * @return string
     */
    public function getObjectsHost()
    {
        return $this->container['objects_host'];
    }

    /**
     * Sets objects_host
     * @param string $objects_host
     * @return $this
     */
    public function setObjectsHost($objects_host)
    {
        $this->container['objects_host'] = $objects_host;

        return $this;
    }

    /**
     * Gets objects_port
     * @return int
     */
    public function getObjectsPort()
    {
        return $this->container['objects_port'];
    }

    /**
     * Sets objects_port
     * @param int $objects_port
     * @return $this
     */
    public function setObjectsPort($objects_port)
    {
        $this->container['objects_port'] = $objects_port;

        return $this;
    }

    /**
     * Gets objects_secure
     * @return bool
     */
    public function getObjectsSecure()
    {
        return $this->container['objects_secure'];
    }

    /**
     * Sets objects_secure
     * @param bool $objects_secure
     * @return $this
     */
    public function setObjectsSecure($objects_secure)
    {
        $this->container['objects_secure'] = $objects_secure;

        return $this;
    }

    /**
     * Gets objects_bucket
     * @return string
     */
    public function getObjectsBucket()
    {
        return $this->container['objects_bucket'];
    }

    /**
     * Sets objects_bucket
     * @param string $objects_bucket
     * @return $this
     */
    public function setObjectsBucket($objects_bucket)
    {
        $this->container['objects_bucket'] = $objects_bucket;

        return $this;
    }

    /**
     * Gets objects_base_folder
     * @return string
     */
    public function getObjectsBaseFolder()
    {
        return $this->container['objects_base_folder'];
    }

    /**
     * Sets objects_base_folder
     * @param string $objects_base_folder
     * @return $this
     */
    public function setObjectsBaseFolder($objects_base_folder)
    {
        $this->container['objects_base_folder'] = $objects_base_folder;

        return $this;
    }

    /**
     * Gets api_key
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     * @param string $api_key
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets api_secret
     * @return string
     */
    public function getApiSecret()
    {
        return $this->container['api_secret'];
    }

    /**
     * Sets api_secret
     * @param string $api_secret
     * @return $this
     */
    public function setApiSecret($api_secret)
    {
        $this->container['api_secret'] = $api_secret;

        return $this;
    }

    /**
     * Gets peer_address
     * @return string
     */
    public function getPeerAddress()
    {
        return $this->container['peer_address'];
    }

    /**
     * Sets peer_address
     * @param string $peer_address
     * @return $this
     */
    public function setPeerAddress($peer_address)
    {
        $this->container['peer_address'] = $peer_address;

        return $this;
    }

    /**
     * Gets watch
     * @return bool
     */
    public function getWatch()
    {
        return $this->container['watch'];
    }

    /**
     * Sets watch
     * @param bool $watch
     * @return $this
     */
    public function setWatch($watch)
    {
        $this->container['watch'] = $watch;

        return $this;
    }

    /**
     * Gets encryption_mode
     * @return \Swagger\Client\Model\ObjectEncryptionMode
     */
    public function getEncryptionMode()
    {
        return $this->container['encryption_mode'];
    }

    /**
     * Sets encryption_mode
     * @param \Swagger\Client\Model\ObjectEncryptionMode $encryption_mode
     * @return $this
     */
    public function setEncryptionMode($encryption_mode)
    {
        $this->container['encryption_mode'] = $encryption_mode;

        return $this;
    }

    /**
     * Gets encryption_key
     * @return string
     */
    public function getEncryptionKey()
    {
        return $this->container['encryption_key'];
    }

    /**
     * Sets encryption_key
     * @param string $encryption_key
     * @return $this
     */
    public function setEncryptionKey($encryption_key)
    {
        $this->container['encryption_key'] = $encryption_key;

        return $this;
    }

    /**
     * Gets versioning_policy_name
     * @return string
     */
    public function getVersioningPolicyName()
    {
        return $this->container['versioning_policy_name'];
    }

    /**
     * Sets versioning_policy_name
     * @param string $versioning_policy_name
     * @return $this
     */
    public function setVersioningPolicyName($versioning_policy_name)
    {
        $this->container['versioning_policy_name'] = $versioning_policy_name;

        return $this;
    }

    /**
     * Gets creation_date
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param int $creation_date
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets last_synchronization_date
     * @return int
     */
    public function getLastSynchronizationDate()
    {
        return $this->container['last_synchronization_date'];
    }

    /**
     * Sets last_synchronization_date
     * @param int $last_synchronization_date
     * @return $this
     */
    public function setLastSynchronizationDate($last_synchronization_date)
    {
        $this->container['last_synchronization_date'] = $last_synchronization_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


