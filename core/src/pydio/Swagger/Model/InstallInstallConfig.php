<?php
/**
 * InstallInstallConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InstallInstallConfig Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InstallInstallConfig implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'installInstallConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'internal_url' => 'string',
        'db_connection_type' => 'string',
        'db_tcp_hostname' => 'string',
        'db_tcp_port' => 'string',
        'db_tcp_name' => 'string',
        'db_tcp_user' => 'string',
        'db_tcp_password' => 'string',
        'db_socket_file' => 'string',
        'db_socket_name' => 'string',
        'db_socket_user' => 'string',
        'db_socket_password' => 'string',
        'db_manual_dsn' => 'string',
        'ds_name' => 'string',
        'ds_port' => 'string',
        'ds_folder' => 'string',
        'external_micro' => 'string',
        'external_gateway' => 'string',
        'external_websocket' => 'string',
        'external_front_plugins' => 'string',
        'external_dav' => 'string',
        'external_wopi' => 'string',
        'external_dex' => 'string',
        'external_dex_id' => 'string',
        'external_dex_secret' => 'string',
        'frontend_hosts' => 'string',
        'frontend_login' => 'string',
        'frontend_password' => 'string',
        'frontend_repeat_password' => 'string',
        'fpm_address' => 'string',
        'license_required' => 'bool',
        'license_string' => 'string',
        'check_results' => '\Swagger\Client\Model\InstallCheckResult[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'internal_url' => null,
        'db_connection_type' => null,
        'db_tcp_hostname' => null,
        'db_tcp_port' => null,
        'db_tcp_name' => null,
        'db_tcp_user' => null,
        'db_tcp_password' => null,
        'db_socket_file' => null,
        'db_socket_name' => null,
        'db_socket_user' => null,
        'db_socket_password' => null,
        'db_manual_dsn' => null,
        'ds_name' => null,
        'ds_port' => null,
        'ds_folder' => null,
        'external_micro' => null,
        'external_gateway' => null,
        'external_websocket' => null,
        'external_front_plugins' => null,
        'external_dav' => null,
        'external_wopi' => null,
        'external_dex' => null,
        'external_dex_id' => null,
        'external_dex_secret' => null,
        'frontend_hosts' => null,
        'frontend_login' => null,
        'frontend_password' => null,
        'frontend_repeat_password' => null,
        'fpm_address' => null,
        'license_required' => 'boolean',
        'license_string' => null,
        'check_results' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'internal_url' => 'internalUrl',
        'db_connection_type' => 'dbConnectionType',
        'db_tcp_hostname' => 'dbTCPHostname',
        'db_tcp_port' => 'dbTCPPort',
        'db_tcp_name' => 'dbTCPName',
        'db_tcp_user' => 'dbTCPUser',
        'db_tcp_password' => 'dbTCPPassword',
        'db_socket_file' => 'dbSocketFile',
        'db_socket_name' => 'dbSocketName',
        'db_socket_user' => 'dbSocketUser',
        'db_socket_password' => 'dbSocketPassword',
        'db_manual_dsn' => 'dbManualDSN',
        'ds_name' => 'dsName',
        'ds_port' => 'dsPort',
        'ds_folder' => 'dsFolder',
        'external_micro' => 'externalMicro',
        'external_gateway' => 'externalGateway',
        'external_websocket' => 'externalWebsocket',
        'external_front_plugins' => 'externalFrontPlugins',
        'external_dav' => 'externalDAV',
        'external_wopi' => 'externalWOPI',
        'external_dex' => 'externalDex',
        'external_dex_id' => 'externalDexID',
        'external_dex_secret' => 'externalDexSecret',
        'frontend_hosts' => 'frontendHosts',
        'frontend_login' => 'frontendLogin',
        'frontend_password' => 'frontendPassword',
        'frontend_repeat_password' => 'frontendRepeatPassword',
        'fpm_address' => 'fpmAddress',
        'license_required' => 'licenseRequired',
        'license_string' => 'licenseString',
        'check_results' => 'CheckResults'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'internal_url' => 'setInternalUrl',
        'db_connection_type' => 'setDbConnectionType',
        'db_tcp_hostname' => 'setDbTcpHostname',
        'db_tcp_port' => 'setDbTcpPort',
        'db_tcp_name' => 'setDbTcpName',
        'db_tcp_user' => 'setDbTcpUser',
        'db_tcp_password' => 'setDbTcpPassword',
        'db_socket_file' => 'setDbSocketFile',
        'db_socket_name' => 'setDbSocketName',
        'db_socket_user' => 'setDbSocketUser',
        'db_socket_password' => 'setDbSocketPassword',
        'db_manual_dsn' => 'setDbManualDsn',
        'ds_name' => 'setDsName',
        'ds_port' => 'setDsPort',
        'ds_folder' => 'setDsFolder',
        'external_micro' => 'setExternalMicro',
        'external_gateway' => 'setExternalGateway',
        'external_websocket' => 'setExternalWebsocket',
        'external_front_plugins' => 'setExternalFrontPlugins',
        'external_dav' => 'setExternalDav',
        'external_wopi' => 'setExternalWopi',
        'external_dex' => 'setExternalDex',
        'external_dex_id' => 'setExternalDexId',
        'external_dex_secret' => 'setExternalDexSecret',
        'frontend_hosts' => 'setFrontendHosts',
        'frontend_login' => 'setFrontendLogin',
        'frontend_password' => 'setFrontendPassword',
        'frontend_repeat_password' => 'setFrontendRepeatPassword',
        'fpm_address' => 'setFpmAddress',
        'license_required' => 'setLicenseRequired',
        'license_string' => 'setLicenseString',
        'check_results' => 'setCheckResults'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'internal_url' => 'getInternalUrl',
        'db_connection_type' => 'getDbConnectionType',
        'db_tcp_hostname' => 'getDbTcpHostname',
        'db_tcp_port' => 'getDbTcpPort',
        'db_tcp_name' => 'getDbTcpName',
        'db_tcp_user' => 'getDbTcpUser',
        'db_tcp_password' => 'getDbTcpPassword',
        'db_socket_file' => 'getDbSocketFile',
        'db_socket_name' => 'getDbSocketName',
        'db_socket_user' => 'getDbSocketUser',
        'db_socket_password' => 'getDbSocketPassword',
        'db_manual_dsn' => 'getDbManualDsn',
        'ds_name' => 'getDsName',
        'ds_port' => 'getDsPort',
        'ds_folder' => 'getDsFolder',
        'external_micro' => 'getExternalMicro',
        'external_gateway' => 'getExternalGateway',
        'external_websocket' => 'getExternalWebsocket',
        'external_front_plugins' => 'getExternalFrontPlugins',
        'external_dav' => 'getExternalDav',
        'external_wopi' => 'getExternalWopi',
        'external_dex' => 'getExternalDex',
        'external_dex_id' => 'getExternalDexId',
        'external_dex_secret' => 'getExternalDexSecret',
        'frontend_hosts' => 'getFrontendHosts',
        'frontend_login' => 'getFrontendLogin',
        'frontend_password' => 'getFrontendPassword',
        'frontend_repeat_password' => 'getFrontendRepeatPassword',
        'fpm_address' => 'getFpmAddress',
        'license_required' => 'getLicenseRequired',
        'license_string' => 'getLicenseString',
        'check_results' => 'getCheckResults'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['internal_url'] = isset($data['internal_url']) ? $data['internal_url'] : null;
        $this->container['db_connection_type'] = isset($data['db_connection_type']) ? $data['db_connection_type'] : null;
        $this->container['db_tcp_hostname'] = isset($data['db_tcp_hostname']) ? $data['db_tcp_hostname'] : null;
        $this->container['db_tcp_port'] = isset($data['db_tcp_port']) ? $data['db_tcp_port'] : null;
        $this->container['db_tcp_name'] = isset($data['db_tcp_name']) ? $data['db_tcp_name'] : null;
        $this->container['db_tcp_user'] = isset($data['db_tcp_user']) ? $data['db_tcp_user'] : null;
        $this->container['db_tcp_password'] = isset($data['db_tcp_password']) ? $data['db_tcp_password'] : null;
        $this->container['db_socket_file'] = isset($data['db_socket_file']) ? $data['db_socket_file'] : null;
        $this->container['db_socket_name'] = isset($data['db_socket_name']) ? $data['db_socket_name'] : null;
        $this->container['db_socket_user'] = isset($data['db_socket_user']) ? $data['db_socket_user'] : null;
        $this->container['db_socket_password'] = isset($data['db_socket_password']) ? $data['db_socket_password'] : null;
        $this->container['db_manual_dsn'] = isset($data['db_manual_dsn']) ? $data['db_manual_dsn'] : null;
        $this->container['ds_name'] = isset($data['ds_name']) ? $data['ds_name'] : null;
        $this->container['ds_port'] = isset($data['ds_port']) ? $data['ds_port'] : null;
        $this->container['ds_folder'] = isset($data['ds_folder']) ? $data['ds_folder'] : null;
        $this->container['external_micro'] = isset($data['external_micro']) ? $data['external_micro'] : null;
        $this->container['external_gateway'] = isset($data['external_gateway']) ? $data['external_gateway'] : null;
        $this->container['external_websocket'] = isset($data['external_websocket']) ? $data['external_websocket'] : null;
        $this->container['external_front_plugins'] = isset($data['external_front_plugins']) ? $data['external_front_plugins'] : null;
        $this->container['external_dav'] = isset($data['external_dav']) ? $data['external_dav'] : null;
        $this->container['external_wopi'] = isset($data['external_wopi']) ? $data['external_wopi'] : null;
        $this->container['external_dex'] = isset($data['external_dex']) ? $data['external_dex'] : null;
        $this->container['external_dex_id'] = isset($data['external_dex_id']) ? $data['external_dex_id'] : null;
        $this->container['external_dex_secret'] = isset($data['external_dex_secret']) ? $data['external_dex_secret'] : null;
        $this->container['frontend_hosts'] = isset($data['frontend_hosts']) ? $data['frontend_hosts'] : null;
        $this->container['frontend_login'] = isset($data['frontend_login']) ? $data['frontend_login'] : null;
        $this->container['frontend_password'] = isset($data['frontend_password']) ? $data['frontend_password'] : null;
        $this->container['frontend_repeat_password'] = isset($data['frontend_repeat_password']) ? $data['frontend_repeat_password'] : null;
        $this->container['fpm_address'] = isset($data['fpm_address']) ? $data['fpm_address'] : null;
        $this->container['license_required'] = isset($data['license_required']) ? $data['license_required'] : null;
        $this->container['license_string'] = isset($data['license_string']) ? $data['license_string'] : null;
        $this->container['check_results'] = isset($data['check_results']) ? $data['check_results'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets internal_url
     * @return string
     */
    public function getInternalUrl()
    {
        return $this->container['internal_url'];
    }

    /**
     * Sets internal_url
     * @param string $internal_url
     * @return $this
     */
    public function setInternalUrl($internal_url)
    {
        $this->container['internal_url'] = $internal_url;

        return $this;
    }

    /**
     * Gets db_connection_type
     * @return string
     */
    public function getDbConnectionType()
    {
        return $this->container['db_connection_type'];
    }

    /**
     * Sets db_connection_type
     * @param string $db_connection_type
     * @return $this
     */
    public function setDbConnectionType($db_connection_type)
    {
        $this->container['db_connection_type'] = $db_connection_type;

        return $this;
    }

    /**
     * Gets db_tcp_hostname
     * @return string
     */
    public function getDbTcpHostname()
    {
        return $this->container['db_tcp_hostname'];
    }

    /**
     * Sets db_tcp_hostname
     * @param string $db_tcp_hostname
     * @return $this
     */
    public function setDbTcpHostname($db_tcp_hostname)
    {
        $this->container['db_tcp_hostname'] = $db_tcp_hostname;

        return $this;
    }

    /**
     * Gets db_tcp_port
     * @return string
     */
    public function getDbTcpPort()
    {
        return $this->container['db_tcp_port'];
    }

    /**
     * Sets db_tcp_port
     * @param string $db_tcp_port
     * @return $this
     */
    public function setDbTcpPort($db_tcp_port)
    {
        $this->container['db_tcp_port'] = $db_tcp_port;

        return $this;
    }

    /**
     * Gets db_tcp_name
     * @return string
     */
    public function getDbTcpName()
    {
        return $this->container['db_tcp_name'];
    }

    /**
     * Sets db_tcp_name
     * @param string $db_tcp_name
     * @return $this
     */
    public function setDbTcpName($db_tcp_name)
    {
        $this->container['db_tcp_name'] = $db_tcp_name;

        return $this;
    }

    /**
     * Gets db_tcp_user
     * @return string
     */
    public function getDbTcpUser()
    {
        return $this->container['db_tcp_user'];
    }

    /**
     * Sets db_tcp_user
     * @param string $db_tcp_user
     * @return $this
     */
    public function setDbTcpUser($db_tcp_user)
    {
        $this->container['db_tcp_user'] = $db_tcp_user;

        return $this;
    }

    /**
     * Gets db_tcp_password
     * @return string
     */
    public function getDbTcpPassword()
    {
        return $this->container['db_tcp_password'];
    }

    /**
     * Sets db_tcp_password
     * @param string $db_tcp_password
     * @return $this
     */
    public function setDbTcpPassword($db_tcp_password)
    {
        $this->container['db_tcp_password'] = $db_tcp_password;

        return $this;
    }

    /**
     * Gets db_socket_file
     * @return string
     */
    public function getDbSocketFile()
    {
        return $this->container['db_socket_file'];
    }

    /**
     * Sets db_socket_file
     * @param string $db_socket_file
     * @return $this
     */
    public function setDbSocketFile($db_socket_file)
    {
        $this->container['db_socket_file'] = $db_socket_file;

        return $this;
    }

    /**
     * Gets db_socket_name
     * @return string
     */
    public function getDbSocketName()
    {
        return $this->container['db_socket_name'];
    }

    /**
     * Sets db_socket_name
     * @param string $db_socket_name
     * @return $this
     */
    public function setDbSocketName($db_socket_name)
    {
        $this->container['db_socket_name'] = $db_socket_name;

        return $this;
    }

    /**
     * Gets db_socket_user
     * @return string
     */
    public function getDbSocketUser()
    {
        return $this->container['db_socket_user'];
    }

    /**
     * Sets db_socket_user
     * @param string $db_socket_user
     * @return $this
     */
    public function setDbSocketUser($db_socket_user)
    {
        $this->container['db_socket_user'] = $db_socket_user;

        return $this;
    }

    /**
     * Gets db_socket_password
     * @return string
     */
    public function getDbSocketPassword()
    {
        return $this->container['db_socket_password'];
    }

    /**
     * Sets db_socket_password
     * @param string $db_socket_password
     * @return $this
     */
    public function setDbSocketPassword($db_socket_password)
    {
        $this->container['db_socket_password'] = $db_socket_password;

        return $this;
    }

    /**
     * Gets db_manual_dsn
     * @return string
     */
    public function getDbManualDsn()
    {
        return $this->container['db_manual_dsn'];
    }

    /**
     * Sets db_manual_dsn
     * @param string $db_manual_dsn
     * @return $this
     */
    public function setDbManualDsn($db_manual_dsn)
    {
        $this->container['db_manual_dsn'] = $db_manual_dsn;

        return $this;
    }

    /**
     * Gets ds_name
     * @return string
     */
    public function getDsName()
    {
        return $this->container['ds_name'];
    }

    /**
     * Sets ds_name
     * @param string $ds_name
     * @return $this
     */
    public function setDsName($ds_name)
    {
        $this->container['ds_name'] = $ds_name;

        return $this;
    }

    /**
     * Gets ds_port
     * @return string
     */
    public function getDsPort()
    {
        return $this->container['ds_port'];
    }

    /**
     * Sets ds_port
     * @param string $ds_port
     * @return $this
     */
    public function setDsPort($ds_port)
    {
        $this->container['ds_port'] = $ds_port;

        return $this;
    }

    /**
     * Gets ds_folder
     * @return string
     */
    public function getDsFolder()
    {
        return $this->container['ds_folder'];
    }

    /**
     * Sets ds_folder
     * @param string $ds_folder
     * @return $this
     */
    public function setDsFolder($ds_folder)
    {
        $this->container['ds_folder'] = $ds_folder;

        return $this;
    }

    /**
     * Gets external_micro
     * @return string
     */
    public function getExternalMicro()
    {
        return $this->container['external_micro'];
    }

    /**
     * Sets external_micro
     * @param string $external_micro
     * @return $this
     */
    public function setExternalMicro($external_micro)
    {
        $this->container['external_micro'] = $external_micro;

        return $this;
    }

    /**
     * Gets external_gateway
     * @return string
     */
    public function getExternalGateway()
    {
        return $this->container['external_gateway'];
    }

    /**
     * Sets external_gateway
     * @param string $external_gateway
     * @return $this
     */
    public function setExternalGateway($external_gateway)
    {
        $this->container['external_gateway'] = $external_gateway;

        return $this;
    }

    /**
     * Gets external_websocket
     * @return string
     */
    public function getExternalWebsocket()
    {
        return $this->container['external_websocket'];
    }

    /**
     * Sets external_websocket
     * @param string $external_websocket
     * @return $this
     */
    public function setExternalWebsocket($external_websocket)
    {
        $this->container['external_websocket'] = $external_websocket;

        return $this;
    }

    /**
     * Gets external_front_plugins
     * @return string
     */
    public function getExternalFrontPlugins()
    {
        return $this->container['external_front_plugins'];
    }

    /**
     * Sets external_front_plugins
     * @param string $external_front_plugins
     * @return $this
     */
    public function setExternalFrontPlugins($external_front_plugins)
    {
        $this->container['external_front_plugins'] = $external_front_plugins;

        return $this;
    }

    /**
     * Gets external_dav
     * @return string
     */
    public function getExternalDav()
    {
        return $this->container['external_dav'];
    }

    /**
     * Sets external_dav
     * @param string $external_dav
     * @return $this
     */
    public function setExternalDav($external_dav)
    {
        $this->container['external_dav'] = $external_dav;

        return $this;
    }

    /**
     * Gets external_wopi
     * @return string
     */
    public function getExternalWopi()
    {
        return $this->container['external_wopi'];
    }

    /**
     * Sets external_wopi
     * @param string $external_wopi
     * @return $this
     */
    public function setExternalWopi($external_wopi)
    {
        $this->container['external_wopi'] = $external_wopi;

        return $this;
    }

    /**
     * Gets external_dex
     * @return string
     */
    public function getExternalDex()
    {
        return $this->container['external_dex'];
    }

    /**
     * Sets external_dex
     * @param string $external_dex
     * @return $this
     */
    public function setExternalDex($external_dex)
    {
        $this->container['external_dex'] = $external_dex;

        return $this;
    }

    /**
     * Gets external_dex_id
     * @return string
     */
    public function getExternalDexId()
    {
        return $this->container['external_dex_id'];
    }

    /**
     * Sets external_dex_id
     * @param string $external_dex_id
     * @return $this
     */
    public function setExternalDexId($external_dex_id)
    {
        $this->container['external_dex_id'] = $external_dex_id;

        return $this;
    }

    /**
     * Gets external_dex_secret
     * @return string
     */
    public function getExternalDexSecret()
    {
        return $this->container['external_dex_secret'];
    }

    /**
     * Sets external_dex_secret
     * @param string $external_dex_secret
     * @return $this
     */
    public function setExternalDexSecret($external_dex_secret)
    {
        $this->container['external_dex_secret'] = $external_dex_secret;

        return $this;
    }

    /**
     * Gets frontend_hosts
     * @return string
     */
    public function getFrontendHosts()
    {
        return $this->container['frontend_hosts'];
    }

    /**
     * Sets frontend_hosts
     * @param string $frontend_hosts
     * @return $this
     */
    public function setFrontendHosts($frontend_hosts)
    {
        $this->container['frontend_hosts'] = $frontend_hosts;

        return $this;
    }

    /**
     * Gets frontend_login
     * @return string
     */
    public function getFrontendLogin()
    {
        return $this->container['frontend_login'];
    }

    /**
     * Sets frontend_login
     * @param string $frontend_login
     * @return $this
     */
    public function setFrontendLogin($frontend_login)
    {
        $this->container['frontend_login'] = $frontend_login;

        return $this;
    }

    /**
     * Gets frontend_password
     * @return string
     */
    public function getFrontendPassword()
    {
        return $this->container['frontend_password'];
    }

    /**
     * Sets frontend_password
     * @param string $frontend_password
     * @return $this
     */
    public function setFrontendPassword($frontend_password)
    {
        $this->container['frontend_password'] = $frontend_password;

        return $this;
    }

    /**
     * Gets frontend_repeat_password
     * @return string
     */
    public function getFrontendRepeatPassword()
    {
        return $this->container['frontend_repeat_password'];
    }

    /**
     * Sets frontend_repeat_password
     * @param string $frontend_repeat_password
     * @return $this
     */
    public function setFrontendRepeatPassword($frontend_repeat_password)
    {
        $this->container['frontend_repeat_password'] = $frontend_repeat_password;

        return $this;
    }

    /**
     * Gets fpm_address
     * @return string
     */
    public function getFpmAddress()
    {
        return $this->container['fpm_address'];
    }

    /**
     * Sets fpm_address
     * @param string $fpm_address
     * @return $this
     */
    public function setFpmAddress($fpm_address)
    {
        $this->container['fpm_address'] = $fpm_address;

        return $this;
    }

    /**
     * Gets license_required
     * @return bool
     */
    public function getLicenseRequired()
    {
        return $this->container['license_required'];
    }

    /**
     * Sets license_required
     * @param bool $license_required
     * @return $this
     */
    public function setLicenseRequired($license_required)
    {
        $this->container['license_required'] = $license_required;

        return $this;
    }

    /**
     * Gets license_string
     * @return string
     */
    public function getLicenseString()
    {
        return $this->container['license_string'];
    }

    /**
     * Sets license_string
     * @param string $license_string
     * @return $this
     */
    public function setLicenseString($license_string)
    {
        $this->container['license_string'] = $license_string;

        return $this;
    }

    /**
     * Gets check_results
     * @return \Swagger\Client\Model\InstallCheckResult[]
     */
    public function getCheckResults()
    {
        return $this->container['check_results'];
    }

    /**
     * Sets check_results
     * @param \Swagger\Client\Model\InstallCheckResult[] $check_results
     * @return $this
     */
    public function setCheckResults($check_results)
    {
        $this->container['check_results'] = $check_results;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


