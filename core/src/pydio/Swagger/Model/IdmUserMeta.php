<?php
/**
 * IdmUserMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IdmUserMeta Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IdmUserMeta implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'idmUserMeta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'node_uuid' => 'string',
        'namespace' => 'string',
        'json_value' => 'string',
        'policies' => '\Swagger\Client\Model\ServiceResourcePolicy[]',
        'policies_context_editable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'node_uuid' => null,
        'namespace' => null,
        'json_value' => null,
        'policies' => null,
        'policies_context_editable' => 'boolean'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'Uuid',
        'node_uuid' => 'NodeUuid',
        'namespace' => 'Namespace',
        'json_value' => 'JsonValue',
        'policies' => 'Policies',
        'policies_context_editable' => 'PoliciesContextEditable'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'node_uuid' => 'setNodeUuid',
        'namespace' => 'setNamespace',
        'json_value' => 'setJsonValue',
        'policies' => 'setPolicies',
        'policies_context_editable' => 'setPoliciesContextEditable'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'node_uuid' => 'getNodeUuid',
        'namespace' => 'getNamespace',
        'json_value' => 'getJsonValue',
        'policies' => 'getPolicies',
        'policies_context_editable' => 'getPoliciesContextEditable'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['node_uuid'] = isset($data['node_uuid']) ? $data['node_uuid'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['json_value'] = isset($data['json_value']) ? $data['json_value'] : null;
        $this->container['policies'] = isset($data['policies']) ? $data['policies'] : null;
        $this->container['policies_context_editable'] = isset($data['policies_context_editable']) ? $data['policies_context_editable'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string $uuid
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets node_uuid
     * @return string
     */
    public function getNodeUuid()
    {
        return $this->container['node_uuid'];
    }

    /**
     * Sets node_uuid
     * @param string $node_uuid
     * @return $this
     */
    public function setNodeUuid($node_uuid)
    {
        $this->container['node_uuid'] = $node_uuid;

        return $this;
    }

    /**
     * Gets namespace
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     * @param string $namespace
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets json_value
     * @return string
     */
    public function getJsonValue()
    {
        return $this->container['json_value'];
    }

    /**
     * Sets json_value
     * @param string $json_value
     * @return $this
     */
    public function setJsonValue($json_value)
    {
        $this->container['json_value'] = $json_value;

        return $this;
    }

    /**
     * Gets policies
     * @return \Swagger\Client\Model\ServiceResourcePolicy[]
     */
    public function getPolicies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     * @param \Swagger\Client\Model\ServiceResourcePolicy[] $policies
     * @return $this
     */
    public function setPolicies($policies)
    {
        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets policies_context_editable
     * @return bool
     */
    public function getPoliciesContextEditable()
    {
        return $this->container['policies_context_editable'];
    }

    /**
     * Sets policies_context_editable
     * @param bool $policies_context_editable
     * @return $this
     */
    public function setPoliciesContextEditable($policies_context_editable)
    {
        $this->container['policies_context_editable'] = $policies_context_editable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


