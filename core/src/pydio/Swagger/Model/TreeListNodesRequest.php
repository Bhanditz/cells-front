<?php
/**
 * TreeListNodesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pydio Cells Rest API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TreeListNodesRequest Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TreeListNodesRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'treeListNodesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'node' => '\Swagger\Client\Model\TreeNode',
        'recursive' => 'bool',
        'ancestors' => 'bool',
        'with_versions' => 'bool',
        'with_commits' => 'bool',
        'limit' => 'string',
        'offset' => 'string',
        'filter_type' => '\Swagger\Client\Model\TreeNodeType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'node' => null,
        'recursive' => 'boolean',
        'ancestors' => 'boolean',
        'with_versions' => 'boolean',
        'with_commits' => 'boolean',
        'limit' => 'int64',
        'offset' => 'int64',
        'filter_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'node' => 'Node',
        'recursive' => 'Recursive',
        'ancestors' => 'Ancestors',
        'with_versions' => 'WithVersions',
        'with_commits' => 'WithCommits',
        'limit' => 'Limit',
        'offset' => 'Offset',
        'filter_type' => 'FilterType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'node' => 'setNode',
        'recursive' => 'setRecursive',
        'ancestors' => 'setAncestors',
        'with_versions' => 'setWithVersions',
        'with_commits' => 'setWithCommits',
        'limit' => 'setLimit',
        'offset' => 'setOffset',
        'filter_type' => 'setFilterType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'node' => 'getNode',
        'recursive' => 'getRecursive',
        'ancestors' => 'getAncestors',
        'with_versions' => 'getWithVersions',
        'with_commits' => 'getWithCommits',
        'limit' => 'getLimit',
        'offset' => 'getOffset',
        'filter_type' => 'getFilterType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['node'] = isset($data['node']) ? $data['node'] : null;
        $this->container['recursive'] = isset($data['recursive']) ? $data['recursive'] : null;
        $this->container['ancestors'] = isset($data['ancestors']) ? $data['ancestors'] : null;
        $this->container['with_versions'] = isset($data['with_versions']) ? $data['with_versions'] : null;
        $this->container['with_commits'] = isset($data['with_commits']) ? $data['with_commits'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
        $this->container['filter_type'] = isset($data['filter_type']) ? $data['filter_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets node
     * @return \Swagger\Client\Model\TreeNode
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     * @param \Swagger\Client\Model\TreeNode $node
     * @return $this
     */
    public function setNode($node)
    {
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets recursive
     * @return bool
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     * @param bool $recursive
     * @return $this
     */
    public function setRecursive($recursive)
    {
        $this->container['recursive'] = $recursive;

        return $this;
    }

    /**
     * Gets ancestors
     * @return bool
     */
    public function getAncestors()
    {
        return $this->container['ancestors'];
    }

    /**
     * Sets ancestors
     * @param bool $ancestors
     * @return $this
     */
    public function setAncestors($ancestors)
    {
        $this->container['ancestors'] = $ancestors;

        return $this;
    }

    /**
     * Gets with_versions
     * @return bool
     */
    public function getWithVersions()
    {
        return $this->container['with_versions'];
    }

    /**
     * Sets with_versions
     * @param bool $with_versions
     * @return $this
     */
    public function setWithVersions($with_versions)
    {
        $this->container['with_versions'] = $with_versions;

        return $this;
    }

    /**
     * Gets with_commits
     * @return bool
     */
    public function getWithCommits()
    {
        return $this->container['with_commits'];
    }

    /**
     * Sets with_commits
     * @param bool $with_commits
     * @return $this
     */
    public function setWithCommits($with_commits)
    {
        $this->container['with_commits'] = $with_commits;

        return $this;
    }

    /**
     * Gets limit
     * @return string
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     * @param string $limit
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     * @return string
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     * @param string $offset
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets filter_type
     * @return \Swagger\Client\Model\TreeNodeType
     */
    public function getFilterType()
    {
        return $this->container['filter_type'];
    }

    /**
     * Sets filter_type
     * @param \Swagger\Client\Model\TreeNodeType $filter_type
     * @return $this
     */
    public function setFilterType($filter_type)
    {
        $this->container['filter_type'] = $filter_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


