<?php

namespace Pydio\Core\Model;

use Pydio\Core\Exception\PydioException;
use Swagger\Client\Model\IdmRole;
use Swagger\Client\Model\IdmUser;
use Swagger\Client\ObjectSerializer;

defined('PYDIO_EXEC') or die('Access not allowed');

class IdmAdressBookItem extends AddressBookItem {

    /**
     * @var IdmUser|IdmRole
     */
    private $idmObject;

    /**
     * IdmAdressBookItem constructor.
     * @param $idmObject IdmUser|IdmRole
     */
    function __construct($idmObject, $baseGroup = "")
    {
        $this->idmObject = $idmObject;
        $uuid            = $idmObject->getUuid();

        if($idmObject instanceof IdmRole){

            $type       = "group";
            if($idmObject->getIsTeam()){
                $id     = FilteredUsersList::TEAM_PREFIX . "/" . $idmObject->getUuid();
            } else {
                $id     = $idmObject->getUuid();
            }
            $label      = $idmObject->getLabel();
            $temporary  = false;
            $external   = false;
            $avatar     = "";
            $this->idmType = "IdmRole";

        } else if($idmObject instanceof IdmUser && $idmObject->getIsGroup()){

            $type       = "group";
            $groupPath =  rtrim($idmObject->getGroupPath(), "/") . "/" . $idmObject->getGroupLabel();
            //$id         = "PYDIO_GRP_" . rtrim($baseGroup, "/")."/".ltrim($groupPath, "/");
            $id         = "PYDIO_GRP_" . "/".ltrim($groupPath, "/");
            if(!empty($idmObject->getAttributes()["displayName"])){
                $label  = $idmObject->getAttributes()["displayName"];
            } else {
                $label = $idmObject->getGroupLabel();
            }
            $temporary  = false;
            $external   = false;
            $avatar     = "";
            $this->idmType = "IdmUser";

        } else if($idmObject instanceof IdmUser) {
            $type       = "user";
            $id         = $idmObject->getLogin();
            if(!empty($idmObject->getAttributes()["displayName"])){
                $label  = $idmObject->getAttributes()["displayName"];
            } else {
                $label = $idmObject->getLogin();
            }
            $temporary  = false;
            if(isSet($idmObject->getAttributes()["profile"]) && $idmObject->getAttributes()["profile"] === "shared"){
                $external = "true";
            } else {
                $external = "false";
            }
            $avatar     = $idmObject->getAttributes()["avatar"] OR '';

            // Filter out some data from attributes
            $idmObject->setRoles([]);
            $attributes = [];
            $contextEditable = $idmObject->getPoliciesContextEditable();
            if($idmObject->getAttributes() !== null) {
                foreach($idmObject->getAttributes() as $attName => $attValue){
                    if(in_array($attName, ["profile", "displayName", "avatar"])){
                        $attributes[$attName] = $attValue;
                        $this->appendData($attName, $attValue);
                    }
                    if($attName === "email" && !empty($attValue)){
                        $this->appendData("hasEmail", true);
                        $attributes["hasEmail"] = "true";
                        if($contextEditable){
                            $this->appendData("email", $attValue);
                            $attributes["email"] = $attValue;
                        }
                    }
                }
            }
            $this->idmObject->setAttributes($attributes);
            if(!$contextEditable){
                $this->idmObject->setPolicies([]);
            }
            $this->idmType = "IdmUser";

        } else {
            throw new PydioException("Unsupported type for IdmAddressBookItem constructor");
        }

        parent::__construct($type, $uuid, $id, $label, $temporary, $external, $avatar);
    }

    function jsonSerialize()
    {
        $data = parent::jsonSerialize(); // TODO: Change the autogenerated stub
        // Reserialize $idmObject to Json
        if($this->idmType == "IdmUser"){
            $data["IdmUser"] = ObjectSerializer::sanitizeForSerialization($this->idmObject);
        } else if($this->idmType == "IdmRole"){
            $data["IdmRole"] = ObjectSerializer::sanitizeForSerialization($this->idmObject);
        }
        return $data;
    }

}